<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="build-pa" default="build:all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
    <description>
        Builds the application.
    </description>

  <!-- Property file related properties and tasks -->
  <property name="cacore-sdk.dir" location="${target.dir}/${cacore-sdk.binaries.relative.dir}"/>
  <property environment="env" />
    <condition property="env.HOSTNAME" value="${env.COMPUTERNAME}">
        <os family="windows" />
    </condition>
  <!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
  <property file="version.properties" />
  <property file="local.properties" />
  <property file="project.properties" />
  <property name="properties.file" value="install.properties"/>
  <property name="upgrade.properties.file" value="upgrade.properties"/>
  <echo message="Using properties file of ${properties.file}."/>
  <available file="${properties.file}" property="properties.file.exists" />

  <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
  <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
  <property file="${properties.file}" />
  <!-- added for remote deployments since file is copied to root of install dir -->
  <basename property="properties.file.name" file="${properties.file}"/>
  <condition property="application.base.path" value="${application.base.path.linux}">
    <or>
      <os family="unix" />
      <os family="mac" />
    </or>
  </condition>

    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2" />
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2" />
    <property file="${properties.file}" />
    <!-- added for remote deployments since file is copied to root of install dir -->
    <basename property="properties.file.name" file="${properties.file}" />
    <!-- Set application.base.path based on platform -->
    <condition property="application.base.path" value="${application.base.path.linux}">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="application.base.path" value="${application.base.path.windows}">
        <os family="windows" />
    </condition>
    <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
    <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>

    <!-- added for remote deployments since file is copied to root of install dir -->
    <basename property="properties.file.name" file="${properties.file}"/>

    <!-- BDA standard structure -->
    <property name="build.dir" location="."/>
    <property name="software.dir" location=".." />
    <property name="common.dir" location="${build.dir}/common" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
    <property name="target.dir" location="${software.dir}/target/pa" />
    <property name="lib.dir" location="${target.dir}/lib" />
    <property name="temp.dir" location="${target.dir}/temp" />
    <property name="reports.dir" location="${target.dir}/reports" />
    <property name="bda-utils.dir" location="${target.dir}/bda-utils" />
    <property name="bda-download.dir" location="${common.dir}/bda-download" />
    <property name="log.dir" location="${target.dir}/logs" />
    <property name="dist.dir" location="${target.dir}/dist" />
    <property name="download.dir" location="${target.dir}/download" />
    <property name="pt.dir" location="${target.dir}/persistent-transient" />
    <property name="ivy.settings.dir" location="${common.dir}/ivy" />
    <property name="working.dir" location="${target.dir}/working" />

    <!-- Ivy Related props -->
    <property name="ivy.bda.definition.file" value="ivy-bda-2.0.0.xml" />
    <property name="ivy.bda.settings.file" value="cbiit-ivy-bda-settings.xml" />

    <!-- Used by dist:*:prep to determin list of files to use for incremental build process.
        Directory and files must be in svn to work.
    -->
    <property name="db-install.src.dir" location="${software.dir}/pa/dbscripts/db-install"/>
    <property name="db-upgrade.src.dir" location="${software.dir}/pa/dbscripts/db-upgrade"/>

    <!-- Properties that relate to how to call build targets from sub-projects-->
    <!-- Working directory passed to Ant tasks -->
    <property name="pa.base.dir" location="${software.dir}/pa"/>
    <property name="pa-ear.base.dir" location="${software.dir}/pa/pa-ear"/>
    <property name="pa-commons.base.dir" location="${software.dir}/pa/commons"/>
    <property name="pa-resources.base.dir" location="${software.dir}/pa/resources"/>
    <property name="pa-ejb.base.dir" location="${software.dir}/pa/pa-ejb"/>
    <property name="pa-web.base.dir" location="${software.dir}/pa/pa-web"/>
    <property name="reg-web.base.dir" location="${software.dir}/reg-web"/>
    <property name="accrual-ear.base.dir" location="${software.dir}/accrual"/>
    <property name="data-warehouse.base.dir" location="${software.dir}/pa/data-warehouse"/>

    <!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
    <property name="pa.build.file" value="build.xml"/>
    <property name="pa-ear.build.file" value="build.xml"/>
    <property name="pa-commons.build.file" value="build.xml"/>
    <property name="pa-ejb.build.file" value="build.xml"/>
    <property name="pa-web.build.file" value="build.xml"/>
    <property name="reg-web.build.file" value="build.xml"/>
    <property name="accrual-ear.build.file" value="build.xml"/>
    <property name="data-warehouse.build.file" value="build.xml"/>

    <!-- The target name that should be called from the sub-project build file -->
    <property name="pa-clean.build.target" value="clean"/>
    <property name="accrual-clean.build.target" value="clean"/>
    <property name="pa-ivy-clean.build.target" value="ivy-clean"/>
    <property name="pa-ear.build.target" value="package"/>
    <property name="pa.javadoc.target" value="generate-javadoc"/>
    <property name="pa-commons.build.target" value="package-notest"/>
    <property name="pa-ejb.build.target" value="package-notest"/>
    <property name="pa-web.build.target" value="package-notest"/>
    <property name="reg-web.build.target" value="package-notest"/>
    <property name="accrual-ear.build.target" value="build-notest"/>
    <property name="accrual-ear.deploy.target" value="deploy-ear"/>
    <property name="data-warehouse.target" value="populate"/>

    <!-- Distribution Structure properties, used to copy files into the distribution area.
            Use project.properties relative dir names becasue they are used by install also-->
    <property name="dist.exploded.dir" location="${dist.dir}/exploded" />
    <property name="dist.javadoc.dir" location="${dist.dir}/javadoc"/>
    <property name="pa-ear.dist.dir" location="${dist.exploded.dir}/${pa-ear.dist.relative.dir}" />
    <property name="pa-commons.dist.dir" location="${dist.exploded.dir}/${pa-commons.dist.relative.dir}" />
    <property name="pa-ejb.dist.dir" location="${dist.exploded.dir}/${pa-ejb.dist.relative.dir}" />
    <property name="pa-web.dist.dir" location="${dist.exploded.dir}/${pa-web.dist.relative.dir}" />
    <property name="reg-web.dist.dir" location="${dist.exploded.dir}/${reg-web.dist.relative.dir}" />
    <property name="viewer-services.dist.dir" location="${dist.exploded.dir}/${viewer-services.dist.relative.dir}" />
    <property name="viewer-web.dist.dir" location="${dist.exploded.dir}/${viewer-web.dist.relative.dir}" />
    <property name="pa-container-jar.dist.dir" location="${dist.exploded.dir}/${pa-container-jar.dist.relative.dir}" />
    <property name="tools.dist.dir" location="${dist.exploded.dir}/${tools.dist.relative.dir}" />
    <property name="common.dist.dir" location="${dist.exploded.dir}/${common.dist.relative.dir}" />
    <property name="jboss-conf.dist.dir" location="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />
    <property name="db-install.dist.dir" location="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.dist.dir" location="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />
    <property name="pa.javadoc.file" location="${pa.base.dir}/javadoc/pa-javadoc.zip"/>
    <property name="accrual.javadoc.file" location="${accrual-ear.base.dir}/javadoc/accrual-javadoc.zip"/>
    <property name="viewer.javadoc.file" location="${viewer.base.dir}/javadoc/viewer-javadoc.zip"/>
    <property name="reg-web.javadoc.file" location="${reg-web.base.dir}/javadoc/reg-web-javadoc.zip"/>

    <property name="resource.file.jboss-globus-lib" value="jboss-globus-libs-cagrid1_1.zip" />
    <property name="resource.file.jboss-globus-war" value="jboss-globus-wsrf-war-cagrid1_1.zip" />

    <!-- Properties to control the pa-grid-3.4 build -->
    <property name="pa-grid-3.4.base.dir" location="${software.dir}/pa-grid-3.4"/>
    <property name="pa-grid-3.4.build.file" location="${pa-grid-3.4.base.dir}/build.xml"/>
    <property name="pa-grid-3.4.dir.target" value="wsrf.war" />
    <property name="pa-grid-3.4.build.target" value="clean:deployJBoss"/>
    <property name="pa-grid-3.4.artifact.dir" value="${pa-grid-3.4.base.dir}/target" />
    <property name="pa-grid-3.4.dist.dir" value="${dist.exploded.dir}/${pa-grid-3.4.dist.relative.dir}"/>

    <!-- Properties to control the pa-grid-3.3 build -->
    <property name="pa-grid-3.3.base.dir" location="${software.dir}/pa-grid-3.3"/>
    <property name="pa-grid-3.3.build.file" location="${pa-grid-3.3.base.dir}/build.xml"/>
    <property name="pa-grid-3.3.dir.target" value="wsrf.war" />
    <property name="pa-grid-3.3.build.target" value="clean:deployJBoss"/>
    <property name="pa-grid-3.3.artifact.dir" value="${pa-grid-3.3.base.dir}/target" />
    <property name="pa-grid-3.3.dist.dir" value="${dist.exploded.dir}/${pa-grid-3.3.dist.relative.dir}"/>

    <!-- Properties to control the pa-grid-3.2 build -->
    <property name="pa-grid-3.2.base.dir" location="${software.dir}/pa-grid-3.2"/>
    <property name="pa-grid-3.2.build.file" location="${pa-grid-3.2.base.dir}/build.xml"/>
    <property name="pa-grid-3.2.dir.target" value="wsrf.war" />
    <property name="pa-grid-3.2.build.target" value="clean:deployJBoss"/>
    <property name="pa-grid-3.2.artifact.dir" value="${pa-grid-3.2.base.dir}/target" />
    <property name="pa-grid-3.2.dist.dir" value="${dist.exploded.dir}/${pa-grid-3.2.dist.relative.dir}"/>

    <!-- Selenium settings -->
    <property name="webdriver.class" value="org.openqa.selenium.firefox.FirefoxDriver"/>
	<property name="phantomjs.binary.path" value="/local/home/cislave/phantomjs-1.9.7-linux-x86_64/bin/phantomjs"/>
    <property name="selenium.proxy.port" value="4444"/>
    <property name="selenium.jboss.port" value="39480"/>
    <property name="selenium.delay" value="10"/>
    <property name="selenium.report.dir" location="${reports.dir}/selenium"/>
    <property name="selenium.report.file" value="selenium-rpt.html"/>
    <property name="selenium.test.dir" location="${software.dir}/test/selenium"/>
    <property name="selenium.test.suite" value="${selenium.test.dir}/cai2TestSuite.html"/>
    <property name="selenium.url" value="http://${jboss.server.hostname}:${jboss.server.port}"/>

    <!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
    <property name="jboss.dest.file" location="${download.dir}/${jboss.binaries.file}"/>
    <property name="jbosscp.dest.file" value="${download.dir}/${jbosscp.binaries.file}"/>
    <property name="cagrid-console.dest.file" value="${download.dir}/${cagrid-console.binaries.file}" />
    <property name="cagrid.target.co.dir" location="${target.dir}/cagrid-target" />

    <!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
    <property name="install.target" value="install"/>
    <property name="upgrade.target" value="upgrade"/>
    <property name="maven.install.target" value="maven:install"/>
    <property name="maven.deploy.target" value="maven:deploy"/>

    <!-- Where grand stores it's outputed pdf reports of build files -->
    <property name="grand.rpt.dir" value="${common.dir}/grand"/>

    <!-- Hot deploy variables -->
    <property name="jboss.hot.deploy.dir"  value="${jboss.home}/server/${jboss.server.name}/deploy"/>
    <property name="pa-ear.file.name"  value="pa.ear"/>
    <property name="pa-web.src.dir" value="${pa-web.base.dir}/src/webapp"/>
    <property name="reg-web.src.dir" value="${reg-web.base.dir}/src/webapp"/>

    <!-- retrive ivy.jar.files then retrieve bda files and librarires -->
    <condition property="commonlibrary.dir" value="">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="commonlibrary.dir" value="c:/">
        <os family="windows" />
    </condition>

    <condition property="local.cbiit-ivy-repo.dir" value="">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="local.cbiit-ivy-repo.dir" value="c:/">
        <os family="windows" />
    </condition>
    <property name="bda-download.file" value="bda-ivy-2.0.0-build.xml" />
    <ant inheritAll="false" inheritRefs="false" antfile="${bda-download.file}" target="retrieve-bda" dir="${bda-download.dir}">
        <property name="bda.version" value="${bda.version}" />
        <property name="bda-utils.dir" location="${bda-utils.dir}" />
        <property name="lib.dir" location="${lib.dir}" />
        <property name="software.dir" location="${software.dir}" />
        <property name="commonlibrary.dir" location="${commonlibrary.dir}" />
        <property name="ivy.settings.file" value="cbiit-ivy-bda-settings.xml"/>
        <property name="target.dir" location="${target.dir}"/>
        <property name="local.cbiit-ivy-repo.dir" value="${local.cbiit-ivy-repo.dir}"/>
    </ant>

    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
    </path>

    <!-- Task definitions -->
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>

    <!-- Includes- include BDA marcos -->
    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml"/>

    <!-- Start logging -->
    <mkdir dir="${log.dir}" />
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${log.dir}/install-${install.time}.log" action="start"/>

    <if>
        <not>
            <isset property="env.ANT_OPTS"/>
        </not>
        <then>
            <fail message="To build this project you need to specify a increased java memory settings.${line.separator}export ANT_OPTS='-Xms256m -Xmx1024m -XX\:PermSize\=128m -XX\:MaxPermSize\=512m' # for Linux or MAC${line.separator}SET ANT_OPTS=-Xms256m -Xmx1024m -XX:PermSize=128m -XX:MaxPermSize=512m # for windows."/>
        </then>
    </if>

    <!-- Targets -->
    <target name="diagnostics" description="diagnostics">
        <echoproperties/>
        <diagnostics/>
    </target>

    <target name="clean">
        <delete dir="${dist.dir}"/>
        <delete dir="${temp.dir}"/>
        <delete dir="${pa-grid-3.4.artifact.dir}"/>
        <delete dir="${pa-grid-3.3.artifact.dir}"/>
        <delete dir="${pa-grid-3.2.artifact.dir}"/>
    </target>

    <target name="init">
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.exploded.dir}"/>
        <mkdir dir="${pa-ear.dist.dir}"/>
        <mkdir dir="${pa-container-jar.dist.dir}"/>
        <mkdir dir="${common.dist.dir}"/>
        <mkdir dir="${tools.dist.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <mkdir dir="${download.dir}"/>
        <mkdir dir="${pt.dir}"/>
        <mkdir dir="${pa-grid-3.4.artifact.dir}"/>
        <mkdir dir="${pa-grid-3.4.dist.dir}"/>
        <mkdir dir="${pa-grid-3.3.artifact.dir}"/>
        <mkdir dir="${pa-grid-3.3.dist.dir}"/>
        <mkdir dir="${pa-grid-3.2.artifact.dir}"/>
        <mkdir dir="${pa-grid-3.2.dist.dir}"/>
        <available file="${jboss.dest.file}" property="jboss.tools.exists"/>
        <available file="${jbosscp.dest.file}" property="jbosscp.tools.exists" />
        <available file="${cagrid-console.dest.file}" property="cagrid-console.tools.exists" />

                <property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}"/>
                <available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists"/>
                <echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}"/>
                <if>
                    <not>
                        <isset property="local.jboss.exists"/>
                    </not>
                    <then>
                        <echo message="LOCAL_JBOSS_HOME not found downloading."/>
                        <antcall target="dist:tools:retrieve:jboss"/>
                        <jboss-install-binaries
                            application.base.path="${local.jboss.home}"
                            jboss.server.name="${jboss.server.name}"
                            jems.install.option="ejb3"
                            jboss.binaries.file="${jboss.dest.file}"
                            jboss.home="${local.jboss.home}"
                         />
                    </then>
                    <else>
                        <echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}"/>
                    </else>
                </if>
        <property name="jboss.deploy.dir" location="${local.jboss.home}/server/${jboss.server.name}/deploy"/>
        <echoproperties prefix="env"/>
    </target>

    <target name="ivy:clean" description="Clean">
    	<ivy:settings file="${bda-download.dir}/${ivy.bda.settings.file}" />
        <ivy:cleancache />
        <ant inheritAll="false" inheritRefs="false"
            antfile="bda-ivy-2.0.0-build.xml"
            target="ivy-cleancache"
            dir="${bda-download.dir}">
            <property name="bda-utils.dir" location="${bda-utils.dir}" />
            <property name="lib.dir" location="${lib.dir}" />
            <property name="software.dir" location="${software.dir}" />
        </ant>
    </target>

    <target name="ivy-get" description="Get dependencies">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ear.build.file}" dir="${pa-ear.base.dir}" >
            <target name="ivy-get"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}" dir="${accrual-ear.base.dir}" >
            <target name="ivy-get"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}" dir="${pa-web.base.dir}" >
            <target name="ivy-get"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}" dir="${reg-web.base.dir}" >
            <target name="ivy-get"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-commons.build.file}" dir="${pa-commons.base.dir}" >
            <target name="ivy-get"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}" dir="${pa-ejb.base.dir}" >
            <target name="ivy-get"/>
        </ant>
    </target>

    <target name="javadoc:all" description="Generates Javadoc for accrual, pa, registry, and accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa.build.file}"
                   dir="${pa.base.dir}" >
            <target name="${pa.javadoc.target}"/>
        </ant>
        <copy file="${pa.javadoc.file}" todir="${dist.javadoc.dir}"/>

        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
                   dir="${accrual-ear.base.dir}" >
            <target name="${pa.javadoc.target}"/>
        </ant>
        <copy file="${accrual.javadoc.file}" todir="${dist.javadoc.dir}"/>

        <ant inheritAll="false" inheritRefs="false"
                   dir="${reg-web.base.dir}" >
            <target name="${pa.javadoc.target}"/>
        </ant>
        <copy file="${reg-web.javadoc.file}" todir="${dist.javadoc.dir}"/>

    </target>

    <!-- Wrapper build target, call appropriate builds for sub-projects -->
    <target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
        depends="
        validate:pre:build,
        clean,
        init,
        build:pa-ear,
        build:pa-grid-3.4,
        build:pa-grid-3.3,
        build:pa-grid-3.2,
        build:accrual-ear
        " />

    <!-- Build generic-query-grid sub-project produces project level artifact -->
    <target name="build:pa-ear" depends="init,build:pa-commons,build:pa-ejb, build:pa-web, build:reg-web" unless="exclude.pa-ear">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ear.build.file}"
            dir="${pa-ear.base.dir}" >
            <property name="exclude.viewer" value="true"/>
            <property name="exclude.accrual" value="${exclude.accrual}"/>
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>
            <property name="grid.dorian.url" value="${grid.dorian.url}"/>
            <property name="gridgrouper.url" value="${gridgrouper.url}"/>
            <property name="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
            <property name="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
            <property name="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
            <property name="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            <property name="gridServicePrincipal" value="${grid.security.jndi.principal}"/>
            <property name="gridServiceCredential" value="${grid.security.jndi.credentials.encrypted}"/>
            <property name="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
            <property name="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
            <property name="default.user.name" value="${default.user.name}"/>
            <property name="mock.po" value="${mock.po}"/>
            <property name="nci.ldap.prefix" value="${nci.ldap.prefix}"/>
            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${pa-ear.build.target}"/>
        </ant>
        <!-- copy paear prop file into the exploded pa ear dist folder -->
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${pa-resources.base.dir}">
                <include name="paear.properties"/>
            </fileset>
        </copy>
        <!-- copy ejb-jar.xml file into the exploded pa ear dist folder -->
        <echo message="copy ejb-jar.xml file to ${pa-ear.dist.dir}"/>
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${pa-resources.base.dir}">
                <include name="ejb-jar.xml"/>
            </fileset>
        </copy>
        <!-- copy quartz jobs xml file into the exploded pa ear dist folder -->
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${pa-resources.base.dir}">
                <include name="quartz_jobs.xml"/>
            </fileset>
        </copy>
        <!-- copy jboss-service.xml file into the exploded pa ear dist folder -->
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${pa-ear.base.dir}/src/resources">
                <include name="jboss-service.xml"/>
            </fileset>
        </copy>
        <!-- copy csm properties file into the exploded pa ear dist folder -->
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${pa-resources.base.dir}">
                <include name="csm.properties"/>
            </fileset>
        </copy>
    </target>

    <!-- Build accrual.ear -->
    <target name="build:accrual-ear" depends="init" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}" dir="${accrual-ear.base.dir}" target="${maven.install.target}"/>
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            dir="${accrual-ear.base.dir}" >
            <property name="jboss.deploy.dir" location="%%jboss.deploy.dir%%" />
            <property name="hibernate.dialect" value="%%database.dialect%%"/>
            <property name="jdbc.driver" value="%%database.driver%%"/>
            <property name="accrual-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="application.url" location="%%application.url%%" />
            <property name="database.url" value="%%database.url%%" />
            <property name="database.user" value="%%database.user%%" />
            <property name="database.password" value="%%database.password%%" />
            <property name="po.jnp.url" value="%%po.jnp.url%%" />
            <property name="pa.jnp.url" value="%%pa.jnp.url%%" />
            <property name="accrual.jnp.url" value="%%accrual.jnp.url%%" />
            <property name="po.port.number" value="%%po.port.number%%" />
            <property name="jboss.server.hostname" value="%%jboss.server.hostname%%" />
            <property name="gridServicePrincipal" value="%%gridServicePrincipal%%"/>
            <property name="gridServiceCredential" value="%%gridServiceCredential%%"/>
            <property name="po.username" value="%%po.username%%"/>
            <property name="po.pass" value="%%po.pass%%"/>
            <property name="po.server.name" value="%%po.server.name%%"/>
            <property name="grid.dorian.url" value="%%grid.dorian.url%%"/>
            <property name="gridgrouper.url" value="%%gridgrouper.url%%"/>
            <property name="gridgrouper.submitter.group" value="%%gridgrouper.submitter.group%%"/>
            <property name="gridgrouper.admin.user" value="%%gridgrouper.admin.user%%"/>
            <property name="gridgrouper.admin.password" value="%%gridgrouper.admin.password%%"/>
            <property name="idps.allow.password.editing" value="%%idps.allow.password.editing%%"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}"/>

            <target name="${accrual-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${accrual-ear.build.target}"/>
        </ant>
        <copy todir="${pa-ear.dist.dir}">
            <fileset dir="${target.dir}/../accrual/lib/ear/">
                    <include name="runtime/caGrid-cds-*.jar"/>
                    <include name="runtime/caGrid-dorian-service-1.3.jar"/>
                    <include name="runtime/commons-httpclient-3.1.jar"/>
                    <include name="runtime/httpclient-4.0.1.jar"/>
                    <include name="runtime/grouper-1.1.jar"/>
                    <include name="runtime/subject-0.2.1.jar"/>
                    <include name="runtime/wsrf_core-4.0.3.jar"/>
                    <include name="runtime/wsrf_core_stubs-4.0.3.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="build:pa-web" depends="init" unless="exclude.pa-ear">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}"
            dir="${pa-web.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>
            <property name="grid.dorian.url" value="${grid.dorian.url}"/>
            <property name="gridgrouper.url" value="${gridgrouper.url}"/>
            <property name="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
            <property name="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
            <property name="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
            <property name="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            <property name="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
            <property name="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
            <property name="pasystem.user" value="${pasystem.user}"/>
            <property name="pasystem.password" value="${pasystem.password}"/>
            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${pa-web.build.target}"/>
        </ant>
    </target>

    <target name="build:reg-web" depends="init" unless="exclude.pa-ear">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            dir="${reg-web.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>
            <property name="grid.dorian.url" value="${grid.dorian.url}"/>
            <property name="gridgrouper.url" value="${gridgrouper.url}"/>
            <property name="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
            <property name="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
            <property name="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
            <property name="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            <property name="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
            <property name="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
            <property name="tooltips.filepath.loc" value="${application.base.path}/${tooltips.filepath.relative.dir}" />
            <property name="tooltips.file.overwrite" value="${tooltips.file.overwrite}" />
            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${reg-web.build.target}"/>
        </ant>
    </target>

    <target name="build:pa-commons" depends="init" unless="exclude.pa-ear">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-commons.build.file}" dir="${pa-commons.base.dir}" target="${maven.install.target}"/>
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-commons.build.file}" dir="${pa-commons.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>
            <property name="grid.dorian.url" value="${grid.dorian.url}"/>
            <property name="gridgrouper.url" value="${gridgrouper.url}"/>
            <property name="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
            <property name="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
            <property name="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
            <property name="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            <property name="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
            <property name="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${pa-commons.build.target}"/>
        </ant>
    </target>

    <target name="build:pa-ejb" depends="init" unless="exclude.pa-ear">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}" dir="${pa-ejb.base.dir}" target="${maven.install.target}"/>
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}" dir="${pa-ejb.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>
            <property name="grid.dorian.url" value="${grid.dorian.url}"/>
            <property name="gridgrouper.url" value="${gridgrouper.url}"/>
            <property name="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
            <property name="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
            <property name="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
            <property name="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            <property name="doc.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}"/>
            <property name="pdq.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}/${pdq.upload.filepath.relative.dir}"/>
            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ivy-clean.build.target}"/>
            <target name="${pa-ejb.build.target}"/>
        </ant>
    </target>

    <!-- Build pa-grid sub-project produces project level artifact -->
    <target name="build:pa-grid-3.3" depends="init" unless="exclude.pa-grid-3.3">
        <fail unless="jboss.server.hostname"/>

        <ant inheritAll="false" inheritRefs="false" antfile="${pa-grid-3.3.build.file}"
            target="${pa-grid-3.3.build.target}"
            dir="${pa-grid-3.3.base.dir}" >
            <property name="project.name" value="${project.name}"/>
            <property name="jboss.dir" value="target"/>
            <property name="jboss.serverinstance.name" value="${pa-grid-3.3-jboss.server.name}"/>
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
            <property name="java.naming.provider.url.host" value="localhost"/>
            <property name="java.naming.provider.url.port" value="%%jboss.server.jndi.port%%"/>
            <!-- RENAMED PROPS -->
            <property name="java.naming.security.principal" value="%%grid.security.jndi.principal%%"/>
            <property name="java.naming.security.credentials" value="%%grid.security.jndi.credentials%%"/>
            <property name="no.deployment.validation" value="true"/>
        </ant>

        <zip update="false" destfile="${pa-grid-3.3.dist.dir}/${pa-grid-3.3.artifact.file}">
            <zipfileset dir="${pa-grid-3.3.artifact.dir}/server/${pa-grid-3.3-jboss.server.name}/deploy/${pa-grid-3.3.dir.target}/" />
        </zip>
        <delete dir="${pa-grid-3.3.artifact.dir}/server" />
    </target>

    <!-- Build pa-grid sub-project produces project level artifact -->
    <target name="build:pa-grid-3.2" depends="init" unless="exclude.pa-grid-3.2">
        <fail unless="jboss.server.hostname"/>

        <ant inheritAll="false" inheritRefs="false" antfile="${pa-grid-3.2.build.file}"
            target="${pa-grid-3.2.build.target}"
            dir="${pa-grid-3.2.base.dir}" >
            <property name="project.name" value="${project.name}"/>
            <property name="jboss.dir" value="target"/>
            <property name="jboss.serverinstance.name" value="${pa-grid-3.2-jboss.server.name}"/>
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
            <property name="java.naming.provider.url.host" value="localhost"/>
            <property name="java.naming.provider.url.port" value="%%jboss.server.jndi.port%%"/>
            <!-- RENAMED PROPS -->
            <property name="java.naming.security.principal" value="%%grid.security.jndi.principal%%"/>
            <property name="java.naming.security.credentials" value="%%grid.security.jndi.credentials%%"/>
            <property name="no.deployment.validation" value="true"/>
        </ant>

        <zip update="false" destfile="${pa-grid-3.2.dist.dir}/${pa-grid-3.2.artifact.file}">
            <zipfileset dir="${pa-grid-3.2.artifact.dir}/server/${pa-grid-3.2-jboss.server.name}/deploy/${pa-grid-3.2.dir.target}/" />
        </zip>
        <delete dir="${pa-grid-3.2.artifact.dir}/server" />
    </target>
    <!-- Build pa-grid sub-project produces project level artifact -->
    <target name="build:pa-grid-3.4" depends="init" unless="exclude.pa-grid-3.4">
        <fail unless="jboss.server.hostname"/>

        <ant inheritAll="false" inheritRefs="false" antfile="${pa-grid-3.4.build.file}"
            target="${pa-grid-3.4.build.target}"
            dir="${pa-grid-3.4.base.dir}" >
            <property name="project.name" value="${project.name}"/>
            <property name="jboss.dir" value="target"/>
            <property name="jboss.serverinstance.name" value="${pa-grid-3.4-jboss.server.name}"/>
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
            <property name="java.naming.provider.url.host" value="%%jboss.server.hostname%%"/>
            <property name="java.naming.provider.url.port" value="%%jboss.server.jndi.port%%"/>
            <!-- RENAMED PROPS -->
            <property name="java.naming.security.principal" value="%%grid.security.jndi.principal%%"/>
            <property name="java.naming.security.credentials" value="%%grid.security.jndi.credentials%%"/>
            <property name="no.deployment.validation" value="true"/>
        </ant>

        <zip update="false" destfile="${pa-grid-3.4.dist.dir}/${pa-grid-3.4.artifact.file}">
            <zipfileset dir="${pa-grid-3.4.artifact.dir}/server/${pa-grid-3.4-jboss.server.name}/deploy/${pa-grid-3.4.dir.target}/" />
        </zip>
        <delete dir="${pa-grid-3.4.artifact.dir}/server" />
    </target>

    <!-- Wrapper build target, call appropriate builds for sub-projects -->
    <target name="validate:pre:build">
        <mkdir dir="${download.dir}" />
        <validate-pre-build />
    </target>

    <!-- Produces all distributions: installer, upgrader and source -->
    <target name="dist" description="Makes all distributions: installer, upgrader and source"
        depends="
        build:all,
        dist:installer,
        dist:upgrader,
    dist:src,
    dist:gui-installer
    " />

    <target name="dist:src">
        <!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
    </target>

    <!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
    <target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository"
        depends="
        init,
        dist:tools:retrieve:jboss,
        dist:tools:retrieve:jbosscp,
        dist:tools:retrieve:jboss-bindings,
        dist:tools:retrieve:cagrid-console,
        dist:tools:retrieve:cagrid-target,
        dist:tools:retrieve:cgmm,
        dist:tools:retrieve:sync-gts
        " />
    <!--
       See https://wiki.nci.nih.gov/display/BuildandDeploymentAutomation/How+to+configure+a+Secure+Grid+Listener for more details
    -->
    <target name="dist:tools:retrieve:sync-gts"  description="Downloads JBOSS bindings filefrom binary repository and verifies checksum" depends="dist:tools:retrieve:cagrid-target">
            <if>
                <not>
                    <available file="${download.dir}/${sync-gts.binaries.file}"/>
                </not>
                <then>
                    <get src="${sync-gts.src.url}" dest="${download.dir}/${sync-gts.binaries.file}" />
                </then>
            </if>
            <property name="sync-gts.dist.dir" location="${dist.exploded.dir}/${sync-gts.dist.relative.dir}"/>
            <unzip src="${download.dir}/${sync-gts.binaries.file}" dest="${sync-gts.dist.dir}"/>
            <!--
            <ant inheritAll="false" inheritRefs="false"
                antfile="build.xml"
                target="all"
                dir="${sync-gts.dist.dir}/syncgts"
                />
            -->
    </target>
    <target name="dist:tools:retrieve:cagrid-target">
            <mkdir dir="${cagrid.target.co.dir}"/>
    	
    	    <copy todir="${cagrid.target.co.dir}" verbose="true" includeEmptyDirs="true">
    	            <fileset dir="${cagrid-target.src.url}">
    	              <include name="**/*.*"/>
    	            </fileset>
    	        </copy>

            <copy todir="${dist.exploded.dir}/cagrid-target">
                <fileset dir="${cagrid.target.co.dir}"/>
            </copy>
    </target>
    <target name="dist:tools:retrieve:cagrid-console" description="Downloads JBOSS from binary repository and verifies checksum">
            <if>
                <not>
                    <available file="${cagrid-console.dest.file}"/>
                </not>
                <then>
                    <get src="${cagrid-console.src.url}" dest="${cagrid-console.dest.file}" />
                </then>
            </if>
            <property name="cagrid-console.dist.dir" location="${dist.exploded.dir}/${cagrid-console.dist.relative.dir}"/>
            <unzip src="${cagrid-console.dest.file}" dest="${dist.exploded.dir}"/>
            <replaceregexp file="${cagrid-console.dist.dir}/ivy-build.xml" byline="true"
                match="override=.true."
                replace=""
                />
            <replaceregexp file="${cagrid-console.dist.dir}/ivy-build.xml" byline="true"
                match="id=.ivy.instance."
                replace=""
                />
            <!--
            <ant inheritAll="false" inheritRefs="false"
                antfile="build.xml"
                target="deployJBoss"
                dir="${cagrid-console.dist.dir}"
                >
                <property name="jboss.dir" value="${tmp.jboss.dir}"/>
            </ant>
            -->
    </target>
    <target name="dist:tools:retrieve:cgmm" if="jboss.cgmm.enable">
        <ant dir="${common.dir}/cgmm" />        <unzip src="${common.dir}/cgmm/cgmm-libs.zip" dest="${dist.exploded.dir}"/>
    </target>

    <target name="deploy:remote:install:ahp"
          depends="remote:install:pa-ear, remote:install:pa-grid-3.3, remote:install:pa-grid-3.2, remote:install:pa-grid-3.4">
    </target>

    <target name="deploy:remote:upgrade:ahp" description="Installs and configures the application and required binaries and re-creates the datbase  on a remote machine. Used for NCI tiers (dev, qa, stg, prod)"
        depends="remote:upgrade:pa-ear,remote:upgrade:pa-grid-3.3,remote:upgrade:pa-grid-3.2,remote:upgrade:pa-grid-3.4">
    </target>

    <target name="dist:tools:retrieve:jboss-bindings"  description="Downloads JBOSS bindings filefrom binary repository and verifies checksum">        
    	<copy file="${jboss-bindings.src.url}" tofile="${dist.exploded.dir}/${jboss-bindings.file}" verbose="true"/>
    </target>

    <!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
    <target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
        <get src="${jboss.src.url}"
            dest="${jboss.dest.file}"/>
      
    </target>
    <target name="dist:tools:retrieve:jbosscp" unless="jbosscp.tools.exists" description="Downloads JBOSS Cumulative Patch from binary repository and verifies checksum">
        <echoproperties prefix="jbosscp"/>
        <if>
            <isset property="jbosscp.src.url"/>
            <then>
                <get src="${jbosscp.src.url}" dest="${jbosscp.dest.file}" />
            </then>
            <else>
                <echo message="jbosscp.src.url not set skipping download of jboss cumulative patch"/>
            </else>
        </if>
    </target>
    <target name="dist:gui-installer" description="Makes Gui-Installer distribution">
        <delete>
            <fileset dir="${dist.dir}">
                <include name="*.jar"/>
            </fileset>
        </delete>
        <gui-installer-prep
            />
        <ant inheritAll="false" inheritRefs="false"
            antfile="install.xml"
            target="build:installer"
            dir="${build.dir}/gui-installer"
            >
            <property name="compile.jar.dir" value="${target.dir}/izpack-4.0.1"/>
        </ant>
    </target>

    <!-- Copies install time resources into distribution tree -->
    <target name="dist:installer:prep" depends="dist:tools:retrieve">
        <!-- added for incremental database build -->
        <!-- Need to call database-build-filelist once for each type of database you support.
            db-upgrade.* propertes are stored in project.properties because they are used in both
            install.xml and build.xml
        -->

        <!-- Copy pa database scripts -->
        <copy todir="${db-install.dist.dir}" overwrite="true">
            <fileset dir="${db-install.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${db-upgrade.dist.dir}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.exploded.dir}" overwrite="true">
            <fileset file="${build.dir}/jboss-server-lib-deletes.txt" />
        </copy>

        <dist-prep />

        <!-- This copies container jars which for deployment to the <server>/lib directory -->
        <copy todir="${pa-container-jar.dist.dir}" overwrite="true">
            <fileset dir="${lib.dir}/pa-ear/container" />
        </copy>
        <copy todir="${dist.exploded.dir}">
            <fileset dir="${build.dir}">
                <include name="install-paear.xml"/>
                <include name="install-pagrid-3.4.xml"/>
                <include name="install-pagrid-3.3.xml"/>
                <include name="install-pagrid-3.2.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- Creates the installer distribution used by automated or manual remote installations -->
    <target name="dist:installer" depends="build:all, dist:installer:prep">
        <delete file="${dist.dir}/${pa-ear.install.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.4.install.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.3.install.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.2.install.zip.file}"/>
        <!-- Set environment name to external -->
        <replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
        <obfuscate-properties-file
            properties.file="${dist.exploded.dir}/install.properties"
            required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
            optional.property.list="ldap.url,ldap.basedn"
            delete.property.list="exclude.jboss.backup"
            />
        <zip destfile="${dist.dir}/${pa-ear.install.zip.file}" basedir="${dist.exploded.dir}" excludes="{pa-grid-3.3.dist.relative.dir}/**, ${pa-grid-3.2.dist.relative.dir}/**, ${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.3.install.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**,${db.dist.relative.dir}/**,${pa-grid-3.2.dist.relative.dir}/**, ${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.2.install.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**, ${db.dist.relative.dir}/**, ${pa-grid-3.3.dist.relative.dir}/**, ${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.4.install.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**, ${db.dist.relative.dir}/**, ${pa-grid-3.3.dist.relative.dir}/**, ${pa-grid-3.2.dist.relative.dir}/**"/>
    </target>

    <!-- Copies install time resources into distribution tree -->
    <target name="dist:upgrader:prep" depends="dist:tools:retrieve">
        <!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
        <!-- Copy pa database scripts, temporarily added to include installer scripts in upgrade path -->
        <copy todir="${db-install.dist.dir}" overwrite="true">
            <fileset dir="${db-install.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy pa database scripts -->
        <copy todir="${db-upgrade.dist.dir}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.exploded.dir}" overwrite="true">
            <fileset file="${build.dir}/jboss-server-lib-deletes.txt" />
        </copy>

        <dist-prep default.target="upgrade" />

        <!-- This copies container jars which for deployment to the <server>/lib directory -->
        <copy todir="${pa-container-jar.dist.dir}" overwrite="true" failonerror="false">
            <fileset dir="${lib.dir}/pa-ear/container" />
        </copy>
        <copy todir="${dist.exploded.dir}">
            <fileset dir="${build.dir}">
                <include name="install-paear.xml"/>
                <include name="install-pagrid-3.4.xml"/>
                <include name="install-pagrid-3.3.xml"/>
                <include name="install-pagrid-3.2.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- Creates upgrader distribution -->
    <target name="dist:upgrader" depends="build:all, dist:upgrader:prep">
        <delete file="${dist.dir}/${pa-ear.upgrade.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.4.upgrade.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.3.upgrade.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid-3.2.upgrade.zip.file}"/>

        <!-- Set environment name to external -->
        <replaceregexp file="${dist.exploded.dir}/upgrade.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />

        <obfuscate-properties-file
            properties.file="${dist.exploded.dir}/upgrade.properties"
            required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
            optional.property.list="ldap.url,ldap.basedn"
            delete.property.list="exclude.jboss.backup"
            />
        <copy todir="${dist.exploded.dir}" overwrite="true">
            <fileset dir="${build.dir}">
                <include name="upgrade.properties" />
            </fileset>
        </copy>
        <replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />

        <zip destfile="${dist.dir}/${pa-ear.upgrade.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-grid-3.3.dist.relative.dir}/**,${pa-grid-3.2.dist.relative.dir}/**,${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.3.upgrade.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**,${db.dist.relative.dir}/**,${pa-grid-3.2.dist.relative.dir}/**,${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.2.upgrade.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**,${db.dist.relative.dir}/**,${pa-grid-3.3.dist.relative.dir}/**,${pa-grid-3.4.dist.relative.dir}/**"/>
        <zip destfile="${dist.dir}/${pa-grid-3.4.upgrade.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**,${db.dist.relative.dir}/**,${pa-grid-3.3.dist.relative.dir}/**,${pa-grid-3.2.dist.relative.dir}/**"/>
    </target>


    <target name="deploy:local:install" depends="build:all,local:install" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" />

    <target name="local:install" depends="dist:installer:prep">
        <!--
        * Requires a database installation.
        * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
        * If you want properties to be used at install time they must be included in a proeprties file.
        * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install.
        * This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs.
        * It only supports using those properties files for now, so if you want to change install time properites edit these files.
        -->
        <deploy-local target.name="${install.target}"/>
    </target>

    <target name="deploy:local:upgrade" depends="build:all,local:upgrade" description="Upgrades the application on the local machine, used for developer desktops and ci environments" />

    <target name="local:upgrade" depends="dist:upgrader:prep">
        <!--
        * Requires a database installation.
        * Will use the target from install.xml specified in ${upgrade.target} (defaults to install unless passed in on command line).
        * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
        * This target will use differnt properties based on linux (linux-upgrade.properties) or windows (windows-upgrade.properties) installs.
        * It only supports using those properties files for now, so if you want to change install time properites edit these files.
        -->
        <deploy-local
            target.name="${upgrade.target}"
            properties.file="${upgrade.properties.file}"
            />
    </target>

    <!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
    <target name="deploy:remote:install"
        depends="
        dist:installer,
        remote:install
        ">
    </target>

    <target name="remote:install" depends="remote:install:pa-ear, remote:install:pa-grid-3.3, remote:install:pa-grid-3.2, remote:install:pa-grid-3.4"/>
    <target name="remote:install:pa-ear">
        <deploy-files
            ssh.user="${ssh.server.username}"
            ssh.host="${ssh.server.hostname}"
            ssh.port="${ssh.port}"
            ssh.key.file="${ssh.key.file}"
            remote.directory.property.name="ssh.dir.temp"
            dist.file="${pa-ear.install.zip.file}"
            />
        <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true install:database install:pa-ear-jboss" />
    </target>
    <target name="remote:install:pa-grid-3.3" unless="exclude.pa-grid-3.3">
        <!-- install pa-grid only-->
        <deploy-files
         ssh.user="${ssh.server.username}"
         ssh.host="${ssh.server.hostname}"
         ssh.port="${ssh.port}"
         ssh.key.file="${ssh.key.file}"
         remote.directory.property.name="ssh.dir.temp"
         dist.file="${pa-grid-3.3.install.zip.file}"
         />
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true install:pa-grid-3.3-jboss" />
    </target>
    <target name="remote:install:pa-grid-3.2" unless="exclude.pa-grid-3.2">
        <!-- install pa-grid only-->
        <deploy-files
         ssh.user="${ssh.server.username}"
         ssh.host="${ssh.server.hostname}"
         ssh.port="${ssh.port}"
         ssh.key.file="${ssh.key.file}"
         remote.directory.property.name="ssh.dir.temp"
         dist.file="${pa-grid-3.2.install.zip.file}"
         />
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true install:pa-grid-3.2-jboss" />
    </target>
    <target name="remote:install:pa-grid-3.4" unless="exclude.pa-grid-3.4">
        <!-- install pa-grid only-->
        <deploy-files
         ssh.user="${ssh.server.username}"
         ssh.host="${ssh.server.hostname}"
         ssh.port="${ssh.port}"
         ssh.key.file="${ssh.key.file}"
         remote.directory.property.name="ssh.dir.temp"
         dist.file="${pa-grid-3.4.install.zip.file}"
         />
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true install:pa-grid-3.4-jboss" />
    </target>

    <!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
    <target name="deploy:remote:upgrade"
        depends="
        dist:upgrader,
        remote:upgrade
        ">
    </target>

    <target name="remote:upgrade" depends="remote:upgrade:pa-ear,remote:upgrade:pa-grid-3.3,remote:upgrade:pa-grid-3.2,remote:upgrade:pa-grid-3.4">
    </target>

    <target name="remote:upgrade:pa-ear">
        <!-- upgrade pa-ear only-->
        <deploy-files
             dist.file="${pa-ear.upgrade.zip.file}"
             />
        <override-properties-prep
               override.properties="${override.properties}"
               override.properties.string.property.name="override.properties.string"/>
        <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} upgrade-dac:pa-ear-jboss upgrade:database" />
    </target>

    <target name="remote:upgrade:pa-grid-3.3" unless="exclude.pa-grid-3.3">
        <!-- upgrade pa-grid only-->
        <deploy-files
             ssh.user="${ssh.server.username}"
             ssh.host="${ssh.server.hostname}"
             ssh.port="${ssh.port}"
             ssh.key.file="${ssh.key.file}"
             remote.directory.property.name="ssh.dir.temp"
             dist.file="${pa-grid-3.3.upgrade.zip.file}"
             />
        <override-properties-prep
                       override.properties="${override.properties}"
                       override.properties.string.property.name="override.properties.string"/>
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} upgrade-dac:pa-grid-3.3-jboss" />
    </target>
    <target name="remote:upgrade:pa-grid-3.2" unless="exclude.pa-grid-3.2">
        <!-- upgrade pa-grid only-->
        <deploy-files
             ssh.user="${ssh.server.username}"
             ssh.host="${ssh.server.hostname}"
             ssh.port="${ssh.port}"
             ssh.key.file="${ssh.key.file}"
             remote.directory.property.name="ssh.dir.temp"
             dist.file="${pa-grid-3.2.upgrade.zip.file}"
             />
        <override-properties-prep
                       override.properties="${override.properties}"
                       override.properties.string.property.name="override.properties.string"/>
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} upgrade-dac:pa-grid-3.2-jboss" />
    </target>
    <target name="remote:upgrade:pa-grid-3.4" unless="exclude.pa-grid-3.4">
        <!-- upgrade pa-grid only-->
        <deploy-files
             ssh.user="${ssh.server.username}"
             ssh.host="${ssh.server.hostname}"
             ssh.port="${ssh.port}"
             ssh.key.file="${ssh.key.file}"
             remote.directory.property.name="ssh.dir.temp"
             dist.file="${pa-grid-3.4.upgrade.zip.file}"
             />
        <override-properties-prep
                       override.properties="${override.properties}"
                       override.properties.string.property.name="override.properties.string"/>
        <remote-ssh
            remoteSshUser="${ssh.server.username}"
            remoteSshHost="${ssh.server.hostname}"
            remoteSshPort="${ssh.port}"
            remoteSshKeyfile="${ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${override.properties.string} upgrade-dac:pa-grid-3.4-jboss" />
    </target>
    <target name="usage" description="Explains how to use this build script">
        <echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
    </target>

    <!-- this target generates visio like diagrams of the build files -->
    <target name="report:grand"  depends="dist:installer:prep" description="Generates grand graphs for build.xml files">
        <!-- Temporary fix to make grand work for install.xml -->
        <report-grand
            build.file.location="build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="master-build.xml"
            />
        <report-grand
            build.file.location="${dist.exploded.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="master-install.xml"
            />
        <report-grand
            build.file.location="${pa-ear.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-ear-build.xml"
            />
        <report-grand
            build.file.location="${pa-ejb.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-ejb-build.xml"
            />
        <report-grand
            build.file.location="${pa-web.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-web-build.xml"
            />
        <report-grand
            build.file.location="${reg-web.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="reg-web-build.xml"
            />
    </target>

    <!-- Beginning static-analysis and testing section of build script -->

    <!-- Wrapper target to call download ivy projects for static analysis tools.  The ivy:retrieves are done separately to ensure that there is on library conflicts among the static analysis tools.  The retrieved files are written to separate directories because the conf names are defined uniquely in projectroot/software/static-analysis:ivy-bda-testing.xml. -->

    <!-- Wrapper test target, call appropriate test for sub-projects -->
    <target name="test:all" description="Runs dynamic test target for all sub-projects"
        depends="
        test:pa-commons,
        test:pa-ejb,
        test:pa-web,
        test:reg-web,
        test:accrual
        "/>

    <target name="test:pa-commons" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-commons.build.file}"
            target="test-dynamic-analysis"
            dir="${pa-commons.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="test.schema.showsql" value="false"/>
            <property name="test.java.naming.provider" value="localhost"/>
        </ant>
    </target>
    <target name="test:pa-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}" target="test-dynamic-analysis"
            dir="${pa-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="jboss.port" value="${selenium.jboss.port}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="test.schema.showsql" value="false"/>
            <property name="test.java.naming.provider" value="localhost"/>
            <property name="pa.server.name" value="${jboss.server.hostname}"/>
            <property name="selenium.server.port" value="${selenium.proxy.port}"/>
        	<property name="webdriver.class" value="${webdriver.class}"/>
        	<property name="phantomjs.binary.path" value="${phantomjs.binary.path}"/>
        </ant>
    </target>
    <target name="test:reg-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            target="test-dynamic-analysis"
            dir="${reg-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
        </ant>
    </target>
    <target name="test:pa-ejb" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}"
            target="test-dynamic-analysis"
            dir="${pa-ejb.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="test.schema.showsql" value="false"/>
            <property name="test.java.naming.provider" value="localhost"/>
            <property name="doc.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}"/>
            <property name="pdq.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}/${pdq.upload.filepath.relative.dir}"/>
        </ant>
    </target>
    <target name="test:accrual" depends="init" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            target="test-dynamic-analysis"
            dir="${accrual-ear.base.dir}" >
        <property name="jboss.deploy.dir" location="${jboss.deploy.dir}" />
        <property name="hibernate.dialect" value="${database.dialect}"/>
        <property name="jdbc.driver" value="${database.driver}"/>
        <property name="accrual-ear.build.dir" location="${pa-ear.dist.dir}" />
        <property name="application.url" location="${application.url}" />
        <property name="database.url" value="${database.url}" />
        <property name="database.user" value="${database.user}" />
        <property name="database.password" value="${database.password}" />
        <property name="po.jnp.url" value="${po.jnp.url}" />
        <property name="pa.jnp.url" value="${pa.jnp.url}" />
        <property name="accrual.jnp.url" value="${accrual.jnp.url}" />
        <property name="po.port.number" value="${po.port.number}" />
        <property name="jboss.server.hostname" value="${jboss.server.hostname}" />
        <property name="accrual.batch.upload.filepath.loc" value="${application.base.path}/${accrual.batch.upload.filepath.relative.dir}"/>
        <property name="po.username" value="${po.username}"/>
        <property name="po.pass" value="${po.pass}"/>
        <property name="po.server.name" value="${po.server.name}"/>
        <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <!-- Wrapper test target, call appropriate test for sub-projects -->
    <target name="static-analysis:all" description="Runs static-analysis target for all sub-projects"
        depends="
        static-analysis:pa-commons,
        static-analysis:pa-ejb,
        static-analysis:pa-web,
        static-analysis:reg-web
        "/>

    <target name="static-analysis:pa-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}"
            target="test-static-analysis"
            dir="${pa-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <target name="static-analysis:reg-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            target="test-static-analysis"
            dir="${reg-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <target name="static-analysis:pa-commons" depends="init">
            <ant inheritAll="false" inheritRefs="false" antfile="${pa-commons.build.file}"
                target="test-static-analysis"
                dir="${pa-commons.base.dir}" >
                <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            </ant>
    </target>

    <target name="static-analysis:pa-ejb" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}"
            target="test-static-analysis"
            dir="${pa-ejb.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>
    
    <target name="continuous-integration" description="calls wrapper targets for continuous integration build"
        depends="static-analysis:all, test:all"/>


    <macrodef name="run-selenium" description="Macro that starts selenium server, runs test, then stops Selenium server">
        <attribute name="runDir"/>
        <attribute name="runTarget" default="run-selenium-tests"/>
        <sequential>
            <ant inheritAll="false" inheritRefs="false" target="@{runTarget}" dir="@{runDir}">
                <property name="pa.server.name" value="${jboss.server.hostname}"/>
                <property name="jboss.server.hostname" value="${jboss.server.hostname}"/>
                <property name="jboss.server.port" value="${selenium.jboss.port}"/>
                <property name="jboss.port" value="${selenium.jboss.port}" />
                <property name="selenium.server.port" value="${selenium.proxy.port}"/>
                <property name="selenium.delay" value="${selenium.delay}"/>
                <property name="webdriver.class" value="${webdriver.class}"/>
                <property name="phantomjs.binary.path" value="${phantomjs.binary.path}"/>
                <property name="jboss.deploy.directory" value="${jboss.deploy.dir}"/>
                <property name="hibernate.dialect" value="${database.dialect}"/>
            	<property name="db.username" value="${database.user}"/>
            	<property name="db.password" value="${database.password}"/>
            	<property name="jdbc.driver" value="${database.driver}"/>
            	<property name="jdbc.url" value="${database.url}"/>
                <property name="gridServicePrincipal" value="${grid.security.jndi.principal}"/>
                <property name="gridServiceCredential" value="${grid.security.jndi.credentials.encrypted}"/>
                <property name="jboss.deploy.dir" value="${jboss.deploy.dir}" />
                <property name="application.url" value="${application.url}" />            	
           </ant>          
        </sequential>
    </macrodef>

    <target name="populate-ci-db" description="Populates the CI db with data necessary for testing.">
        <ant inheritAll="false" inheritRefs="false" target="populate-test-db" dir="${pa.base.dir}">
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
        </ant>
    </target>

    <target name="run-selenium:paear" description="Runs Selenium for pa" depends="build:pa-web">
        <run-selenium runDir="${pa.base.dir}"/>
    </target>

    <target name="run-selenium:reg-web" description="Runs Selenium for registry" depends="build:reg-web">
        <run-selenium runDir="${reg-web.base.dir}"/>
    </target>

    <target name="run-selenium:accrual" description="Runs Selenium for Accrual" depends="build:accrual-ear" unless="exclude.accrual">
        <run-selenium runDir="${accrual-ear.base.dir}"/>
    </target>

    <target name="run-selenium:all" description="Runs Selenium tests for pa, registry, and accrual"
        depends="run-selenium:reg-web,run-selenium:paear, run-selenium:accrual">
    </target>

    <target name="maven:install" description="Installs the pa-commons,pa-ejb-client and accrual-services-client into the local maven repo.">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa.build.file}" dir="${pa.base.dir}" target="${maven.install.target}">
            <property name="hibernate.dialect" value="${hibernate.dialect}"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}" dir="${accrual-ear.base.dir}" target="${maven.install.target}"/>
    </target>

    <target name="maven:deploy" description="Installs the pa-commons,pa-ejb-client and accrual-services-client into the local maven repo.">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa.build.file}" dir="${pa.base.dir}" target="${maven.deploy.target}">
            <property name="maven.username"  value="${maven.username}"/>
            <property name="maven.password"  value="${maven.password}"/>
            <property name="hibernate.dialect" value="${hibernate.dialect}"/>
        </ant>
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}" dir="${accrual-ear.base.dir}" target="${maven.deploy.target}">
            <property name="maven.username"  value="${maven.username}"/>
            <property name="maven.password"  value="${maven.password}"/>
        </ant>
    </target>

    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <property name="ivy.dep.file" value="${bda-download.dir}/ivy-bda-2.0.0.xml"/>
        <ivy:settings file="${bda-download.dir}/cbiit-ivy-bda-settings.xml" />
    </target>

    <target name="ivy-test-selenium" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="test-selenium" />
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
        <path id="project.test.selenium.classpath">
            <fileset dir="${lib.dir}/test-selenium">
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <target name="test:seleniumrc:stop">
        <get taskname="selenium-shutdown"
            src="http://localhost:${selenium.proxy.port}/selenium-server/driver/?cmd=shutDown"
            dest="${temp.dir}/reslut.txt" ignoreerrors="true"/>
    </target>

    <target name="test:selenium:init">
        <mkdir dir="${selenium.report.dir}"/>

        <if>
            <not>
                <socket server="${jboss.server.hostname}" port="${jboss.server.port}" />
            </not>
            <then>
                <jboss-start-jboss />
            </then>
        </if>
    </target>

    <target name="test:selenium"
        depends="
        ivy-test-selenium,
        test:selenium:init,
        test:selenium:run,
        test:seleniumrc:stop
        "
        />

    <target name="test:selenium:run">
        <osfamily property="os.family"/>
        <if>
            <equals arg1="${os.family}" arg2="unix"/>
            <then>
                <echo message="To be able to selenium tests on Unix platforms you need to meet the following conditions."/>
                <echo message="You need to be logged in on the console running X (developer linux or mac workstation)."/>
                <echo message=" If you are running it from a server that does not have a console (like a CI server) you need to be running at runlevel 3, running and xframe buffer ('Xvfb :1 -screen 0 1024x768x24', should be setup on a CI server) and have your DISPLAY environment variable sto to match your frame buffer ('DISPLAY=:1.0', should be set in .bash_profile on CI server)."/>
                <fail unless="env.DISPLAY" message="DISPLAY environment variable not set, please set it as outlined above and run again."/>
            </then>
        </if>
        <taskdef resource="selenium-ant.properties"  classpathref="project.test.selenium.classpath"/>
        <selenese
            suite="${selenium.test.suite}"
            browser="${selenium.browser}"
            results="${selenium.report.dir}/${selenium.report.file}"
            multiWindow="false"
            timeoutInSeconds="60"
            port="${selenium.proxy.port}"
            startURL="${selenium.url}"
                />
    </target>

    <target name="ivy-resolve-all" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" />
    </target>

    <target name="report:ivy"
        depends="
        ivy-resolve-all
        ">
        <property name="ivy.report.dir" value="${reports.dir}/ivy"/>
        <delete dir="${ivy.report.dir}"/>
        <mkdir dir="${ivy.report.dir}"/>
        <ivy:report
            outputpattern="target/reports/ivy/[organisation]-[module]-[conf].[ext]"
            dot="true"
            graph="false"
            />
        <util-dot-on-dir
            dot-file.dir="target/reports/ivy"
            />
    </target>

    <target name="deploy:hot:accrual" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            dir="${accrual-ear.base.dir}" >
            <property name="jboss.deploy.dir" location="${jboss.hot.deploy.dir}" />

            <target name="${accrual-ear.deploy.target}"/>
        </ant>
    </target>

    <target name="deploy:hot" depends="build:all, deploy:hot:accrual" description="Hot deploys the deployment artifact">
        <copy file="${pa-ear.dist.dir}/${pa-ear.file.name}" todir="${jboss.hot.deploy.dir}" />
    </target>

    <target name="deploy:hot:jsp" description="Copies all current JSP code to the deployed application for quick update">
        <for param="toDir">
            <path>
                <dirset dir="${jboss.hot.deploy.dir}/../tmp/deploy" includes="tmp*${pa-ear.file.name}*" />
            </path>
            <sequential>
                <copy todir="@{toDir}/pa-web-exp.war/">
                    <fileset dir="${pa-web.src.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
                <copy todir="@{toDir}/reg-web-exp.war/">
                    <fileset dir="${reg-web.src.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
            </sequential>
        </for>
    </target>

    <target name="database:prep" description="Copies db files with filtering">
    <path id="jdbc.driver.classpath">
        <pathelement location="${database.driver.file}"/>
    </path>
        <echoproperties prefix="database"/>
        <copy todir="${working.dir}/" filtering="true"  overwrite="true">
            <fileset dir="${db.src.dir}">
                <include name="**/db-upgrade/**/*"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
                <filter token="db-upgrade.run.dir" value="${working.dir}/db-upgrade/${database.type}"/>
                <filter token="gridgrouper.url" value="${gridgrouper.url}"/>
            </filterset>
        </copy>
    </target>
    <target name="database:gencl" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
        depends="
        database:prep
        ">
        <database-genchangelog
            database.changelog.file="${target.dir}/generated-change-log.xml"
            />
    </target>
    <target name="database:diff" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
        depends="
        database:prep
        ">
        <database-diff
            output.file.txt="${target.dir}/generated-diff-log.txt"
            output.file.xml="${target.dir}/generated-diff-log.xml"
            />
    </target>
    <target name="database:doc" description="Generates database documentation." unless="exclude.database"
        depends="
        database:prep
        ">
        <mkdir dir="${reports.dir}/db"/>
        <database-doc
            output.dir="${reports.dir}/db"
            database.changelog.file="${working.dir}/db-upgrade/db-upgrade.xml"
            />
    </target>
    <target name="report:erd">
        <generate-erd
            schemaspy.jar="schemaspy-3.1.1.jar"
            database.driver.jar="mysql-connector-java-5.0.5.jar"
            />
    </target>
    <target name="report:uml">
        <property name="uml.dir" value="${reports.dir}/uml"/>
        <path id="bda-blueprints.classpath.ref">
            <fileset dir="${lib.dir}/runtime">
                <include name="**/*.jar" />
            </fileset>
        </path>
        <generate-uml
            uml.dir="${uml.dir}"
            src.java.dir="${bda-blueprints-webapp.base.dir}/src/java"
            uml.source.path="bda-blueprints.classpath.ref"
            />
    </target>

    <target name="build-and-populate-data-warehouse" description="Constructs and populates the data warehouse">
    	
    	<!--
    	<condition property="datawarehouse.dest.db.password.final" value="${datawarehouse.dest.db.password}">
    	      <isset property="datawarehouse.dest.db.password"/>
    	</condition>
       	<condition property="datawarehouse.dest.db.password.final" value="${database.password}">
       		<not>
       		  	<isset property="datawarehouse.dest.db.password.final"/>
       		</not>        	
       	</condition>
    	-->
    	
        <ant inheritAll="false" inheritRefs="false" antfile="${data-warehouse.build.file}" dir="${data-warehouse.base.dir}" >
            <property name="datawarehouse.pa.dest.jdbc.driver" value="${datawarehouse.dest.jdbc.driver}"/>
            <property name="datawarehouse.pa.dest.jdbc.url"  value="${datawarehouse.dest.jdbc.url}"/>
            <property name="datawarehouse.pa.dest.db.username" value="${datawarehouse.dest.db.username}" />
            <property name="datawarehouse.pa.dest.db.password" value="${datawarehouse.dest.db.password}"/>

            <property name="datawarehouse.pa.source.jdbc.driver" value="${datawarehouse.pa.source.jdbc.driver}"/>
            <property name="datawarehouse.pa.source.jdbc.url"    value="${datawarehouse.pa.source.jdbc.url}"/>
            <property name="datawarehouse.pa.source.db.username" value="${datawarehouse.pa.source.db.username}" />
            <property name="datawarehouse.pa.source.db.password" value="${datawarehouse.pa.source.db.password}"/>

            <property name="datawarehouse.po.jdbc.driver" value="${database.driver}"/>
            <property name="datawarehouse.po.jdbc.url"  value="${datawarehouse.po.database.url}"/>
            <property name="datawarehouse.po.db.username" value="${datawarehouse.po.database.user}" />
            <property name="datawarehouse.po.db.password" value="${datawarehouse.po.database.password}"/>
            <target name="${data-warehouse.target}"/>
        </ant>
    </target>
</project>

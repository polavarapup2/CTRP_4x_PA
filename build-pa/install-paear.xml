<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/pa-ear/trunk/software/install.xml $
-->
<project name="pa-ear-installer" default="upgrade" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant"
  >
  <description>
    This build file is part of the COPPA-PA project. This is the master install file for the COPPA-PA project. This script is copied into the distribution and executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
    Install will do the following
    * Install binaries
    * Configure binaries
    * Install application
    * Configure application
    * Re-create database
    * Upgrade database
    Upgrade will do the following
    * Install application
    * Configure application
    * Upgrade database
    The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
    Application servers (option for grid services also)
    * JBoss
    Databases
    * PostgreSQL
    This script requires java and ant to run. Every thing else it needs is included in the distribution.
  </description>
  <!-- *-ds.xml and WAR -->
  <property name="pa-ear.dir.dist" value="${basedir}/${pa-ear.dist.relative.dir}" />
  <property name="pa-ear.ds.file" value="pa-ds.xml" />
  <property name="pa-ear.app-sec-conf.file" value="ApplicationSecurityConfig.xml" />
  <property name="pa-ear.hibernate.file" value="hibernate.cfg.xml" />
  <property name="pa-ear.ear.file" value="pa.ear" />
  <property name="accrual-ear.ear.file" value="accrual.ear" />

  <target name="install:pa-ear-jboss:clean" unless="exclude.pa-ear">
    <sleep seconds="5" />
    <property name="backup.count" value="5"/>

    <if>
      <not>
        <equals arg1="${exclude.jboss.backup}" arg2="true"/>
      </not>
      <then>
        <!-- Jboss backup, do not compress until install is finished -->
        <property name="backup.pa-ear-jboss.base.dir" location="${application.base.path}/backup/pa-ear"/>
        <!-- So these directories won't be included in the backup, they are not needed to use jboss -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
        <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

        <backup-dir
          src.dir="${jboss.home}"
          backup.base.dir="${backup.pa-ear-jboss.base.dir}"
          backup.count="${backup.count}"
          />
      </then>
    </if>
    <delete dir="${jboss.home}"/>
  </target>

  <!-- Targets begin -->
  <target name="install:pa-ear-jboss:init" depends="common:init:pre">
      <!-- determine if port configurations or port lists are being called -->
      <if>
          <isset property="jboss.ncicb-standard.port-config"/>
          <then>
              <!-- Read some port properties from standard bindings file -->
              <echo message="Using JBoss NCICB Standard port configurations"/>
              <if>
                  <equals arg1="${jboss.major.version}" arg2="4"/>
                  <then>
                      <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
                      <jboss-read-ports
                          jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                          />
                      <jboss-bindings-validate
                          jboss.server.bindingfile.location="${jboss.server.binding.template.location}"
                          />
                  </then>
                  <elseif>
                      <equals arg1="${jboss.major.version}" arg2="5"/>
                      <then>
                          <property name="pa-ear-jboss.server.bindingfile.location" value="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"/>
                          <property name="temp.bindings.file" value="${temp.dir}/unmodified-bindings-jboss-beans.xml"/>
                          <copy tofile="${temp.bindings.file}" file="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/unmodified-bindings-jboss-beans.xml"/>
                            <property name="temp.ejb.file" value="${temp.dir}/ejb3-connectors-jboss-beans.xml"/>
                            <copy tofile="${temp.ejb.file}" file="${bda-utils.dir}/resource/jboss-5.1.0.GA/ejb3-connectors-jboss-beans.xml"/>
                            <jboss51-bindings-nci
                              jboss.server.bindingfile.location="${temp.bindings.file}"
                              />
                          <jboss51-read-ports-nci
                              jboss.server.bindingfile.location="${temp.bindings.file}"
                              jboss.server.ejbfile.location="${temp.ejb.file}"
                              />
                      </then>
                  </elseif>
              </if>
              <echo message="http -${jboss.server.port} "/>
              <echo message="http -${jboss.server.jndi.port} "/>
              <properties-exist
                  properties.list="jboss.server.jndi.port,jboss.server.port,jboss.server.ports.name"
                  />
          </then>
          <else>
              <!-- else ensure that all ports are set, since these will be removed from install-properties.template we will verify here.  They have to be removed so the validator works with or without the properties or we have to change the format of the file. -->
              <echo message="Using custom JBoss port configurations"/>
              <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
              <properties-exist
                  properties.list="jboss.server.jndi.port,jboss.server.port,jboss.cobraorb.port,jboss.hajndi.port,jboss.hajrmi.port,jboss.jmx-rmi.port,jboss.messaging.port,jboss.pooledha.port,jboss.server.bind.port,jboss.server.rmi.port,jboss.service.rmiobject.port,jboss.snmp.port,jboss.snmp-trapd.port,jboss.web.service.port,jboss.unifiedinvoker.port,jboss.hajndi.auto.port,jboss.ssl.port,jboss.jms2.netty.port,jboss.jms2.netty-ssl.port,jboss.transaction.recovery.port,jboss.transaction.status.port,jboss.transaction.processid.port"
                  />
          </else>
      </if>
  </target>
  <target name="common:pa-ear-jboss:init" depends="common:init:pre,install:pa-ear-jboss:init" unless="exclude.pa-ear">
      <property name="jboss.ssl.enable" value="false"/>
      <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
      <jboss-version
          />
      <if>
          <equals arg1="${jboss.http-connector.remove}" arg2="true"/>
          <then>
              <property name="jboss.application.url" value="https://${jboss.server.hostname}:${jboss.server.port}/registry"/>
              <property name="jboss.application.external.url" value="https://${jboss.external.http.host}:${jboss.external.ssl.port}/registry"/>
          </then>
          <else>
              <property name="jboss.application.url" value="http://${jboss.server.hostname}:${jboss.server.port}/registry"/>
              <if>
                  <equals arg1="${jboss.external.http.port}" arg2=""/>
                  <then>
                      <property name="jboss.application.external.url.port" value="${jboss.server.port}"/>
                  </then>
                  <else>
                      <property name="jboss.application.external.url.port" value="${jboss.external.http.port}"/>
                  </else>
              </if>
              <property name="jboss.application.external.url" value="http://${jboss.external.http.host}:${jboss.application.external.url.port}/registry"/>
          </else>
      </if>
      <property name="application.url" value="${jboss.application.url}"/>
      <property name="register.mail.body.url" value="${jboss.application.external.url}/${register.mail.body.url.action}"/>
      <property name="doc.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}"/>
      <property name="pdq.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}/${pdq.upload.filepath.relative.dir}"/>
      <property name="accrual.batch.upload.filepath.loc" value="${application.base.path}/${accrual.batch.upload.filepath.relative.dir}"/>
      <property name="tooltips.filepath.loc" value="${application.base.path}/${tooltips.filepath.relative.dir}"/>
      <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
      <basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
      <dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
      <basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
      <dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
      <basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
      <property name="jboss.socket.ports" value="${jboss.server.port},${jboss.server.rmi.port},${jboss.server.jndi.port},${jboss.service.rmiobject.port},${jboss.jms.port},${jboss.web.service.port}"/>
  </target>

  <target name="install:pa-ear-jboss:binaries" unless="exclude.pa-ear">
      <jboss-install-binaries
          jboss.server.name="${jboss.server.name}"
          application.base.path="${application.base.path}"
          jems.install.option="ejb3"
          jboss.home="${jboss.home}"
          />
      <jboss-nci-customizations
          application.base.path="${application.base.path}"
          jboss.home="${jboss.home}"
          jboss.server.name="${jboss.server.name}"
          jboss.server.jndi.port="${jboss.server.jndi.port}"
          jboss.java.opts="${jboss.java.opts}"
          />

  </target>

  <target name="install:pa-ear-jboss:app"
          description="Deploy pa-ear pa-ear.ear, pa-ear-api.war and common libraries"
          unless="exclude.pa-ear">
      <mkdir dir="${doc.upload.filepath.loc}" />
      <available file="${doc.upload.filepath.loc}" property="doc.upload.filepath.exists" />
      <fail unless="doc.upload.filepath.exists" message="The doc upload dir at ${doc.upload.filepath.loc} has not been created." />

      <mkdir dir="${pdq.upload.filepath.loc}" />
      <available file="${pdq.upload.filepath.loc}" property="pdq.upload.filepath.exists" />
      <fail unless="pdq.upload.filepath.exists" message="The pdq upload dir at ${pdq.upload.filepath.loc} has not been created." />

      <runtarget target="copy-tooltips"/>

      <!-- added to ensure working.dirs are fresh for our install -->
      <delete dir="${jboss.home}/server/${jboss.server.name}/tmp" failonerror="false"/>
      <delete dir="${jboss.home}/server/${jboss.server.name}/work" failonerror="false"/>
      <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server.log.${install.time}" failonerror="false"/>

      <copy file="${pa-ear.dir.dist}/${pa-ear.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />

      <!-- deploy jars to server lib but remove old ones first -->
      <delete verbose="true">
          <fileset dir="${jboss.home}/server/${jboss.server.name}/lib" includesfile="jboss-server-lib-deletes.txt" />
      </delete>
      <copy todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true">
          <fileset dir="${pa-container-jar.dist.dir}">
            <exclude name="commons-httpclient-3.0.jar"/>
            <exclude name="servlet-2.2.jar"/>
          </fileset>
      </copy>

      <runtarget target="install:pa-ear-jboss:accrual-ear"/>
  </target>

  <target name="prepare-tooltips">
      <available file="${tooltips.filepath.loc}/RegWebTooltips.properties" type="file"
          property="tooltips.file.present" value="true"/>
      <condition property="copy.tooltips.file" value="true">
        <or>
            <isfalse value="${tooltips.file.present}" />
            <istrue value="${tooltips.file.overwrite}" />
        </or>
      </condition>
  </target>

  <target name="copy-tooltips-file" if="copy.tooltips.file">
    <echo message="Copying ${temp.dir}/reg-web-war/WEB-INF/classes/RegWebTooltips.properties to ${tooltips.filepath.loc}" />
    <delete dir="${temp.dir}/reg-web-war" />
    <unzip src="${temp.dir}/pa-ear/reg-web.war" dest="${temp.dir}/reg-web-war" />
    <copy file="${temp.dir}/reg-web-war/WEB-INF/classes/RegWebTooltips.properties" todir="${tooltips.filepath.loc}" overwrite="true" />
  </target>

  <target name="copy-tooltips"  depends="prepare-tooltips, copy-tooltips-file"/>

  <target name="install:pa-ear-jboss:app:configure" description="Configure pa-ear application" unless="exclude.pa-ear">
      <copy file="${jboss-conf.dir.dest}/${pa-ear.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
      <configure-grid-log4j log.level="${app.log.level}" log.level.default="${app.log.level.default}" log.level.hibernate="${app.log.level.hibernate}" config.dir="${jboss.home}/server/${jboss.server.name}/conf"/>
      <echo message="replace server.xml - ${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"/>
      <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
                 match='&lt;Connector acceptCount="100" address="\$\{jboss.bind.address\}"'
                 replace='&lt;Connector acceptCount="100" address="${jboss.bind.address}" maxSavePostSize="16384"'
                  />
      <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
                 match='emptySessionPath="false" enableLookups="false" port="8009"'
                 replace='emptySessionPath="false" enableLookups="false" port="8009" maxSavePostSize="16384"'
                  />
      <echo message="Changing AccessLogValue logging pattern to include request processing time -- ${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"/>
      <replaceregexp file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/server.xml"
		 flags="g"
                 match='pattern="common"'
                 replace='pattern="%h %l %u %t &amp;quot;%r&amp;quot; %s %b %T"'
                  />
  </target>

  <target name="install:pa-ear-jboss:app:re-configure" unless="exclude.pa-ear">
      <mkdir dir="${temp.dir}/pa-ear"/>
      <delete dir="${temp.dir}/pa-ear"/>
      <mkdir dir="${temp.dir}/pa-ear"/>

      <unzip src="${pa-ear.dir.dist}/${pa-ear.ear.file}" dest="${temp.dir}/pa-ear"/>
      <unzip src="${temp.dir}/pa-ear/pa-ejb.jar" dest="${temp.dir}/pa-ejb-jar"/>
      <unzip src="${temp.dir}/pa-ear/pa-web.war" dest="${temp.dir}/pa-web-war"/>

      <delete file="${temp.dir}/pa-ejb-jar/paear.properties"/>
      <delete file="${temp.dir}/pa-ejb-jar/META-INF/ejb-jar.xml"/>

      <echo message="Looking for paear.properties in ${pa-ear.dir.dist}"/>
      <copy todir="${temp.dir}/pa-ejb-jar" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="paear.properties"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <echo message="Looking for ejb-jar.xml in ${pa-ear.dir.dist}"/>
      <copy todir="${temp.dir}/pa-ejb-jar/META-INF" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="ejb-jar.xml"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <delete file="${temp.dir}/pa-web-war/quartz_jobs.xml"/>
      <echo message="Looking for quartz_jobs.xml in ${pa-ear.dir.dist}"/>
      <copy todir="${temp.dir}/pa-web-war/WEB-INF/classes" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="quartz_jobs.xml"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <delete file="${temp.dir}/pa-web-war/csm.properties"/>
      <echo message="Looking for csm.properties in ${pa-ear.dir.dist}"/>
      <copy todir="${temp.dir}/pa-web-war/WEB-INF/classes" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="csm.properties"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <echo message="Looking for jboss-service.xml in ${pa-ear.dir.dist}"/>
      <delete file="${temp.dir}/pa-ear/jboss-service.xml"/>
      <copy todir="${temp.dir}/pa-ear" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="jboss-service.xml"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <delete file="${temp.dir}/pa-ear/META-INF/security-config.xml"/>
      <copy todir="${temp.dir}/pa-ear/META-INF" filtering="true">
          <fileset dir="${jboss-conf.dir.dest}">
              <include name="security-config.xml"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <echo message="Fixing jndi.properties"/>
      <replaceregexp file="${temp.dir}/pa-ejb-jar/jndi.properties" byline="true"
                     match="^(java.naming.provider.url)=.*"
                     replace="# modified by installer ${line.separator}\1=jnp://${jboss.server.hostname}:${jboss.server.jndi.port}"/>

      <replaceregexp file="${temp.dir}/pa-ejb-jar/jndi.properties" byline="true"
                     match="^(java.naming.security.principal)=.*"
                     replace="# modified by installer ${line.separator}\1=${po.username}"/>

      <replaceregexp file="${temp.dir}/pa-ejb-jar/jndi.properties" byline="true"
                     match="^(java.naming.security.credential)=.*"
                     replace="# modified by installer ${line.separator}\1=${po.pass}"/>

      <replaceregexp file="${temp.dir}/pa-ejb-jar/po.jndi.properties" byline="true"
                     match="^(java.naming.provider.url)=.*"
                     replace="# modified by installer ${line.separator}\1=jnp://${po.server.name}:${po.port.number}"/>

      <replaceregexp file="${temp.dir}/pa-ejb-jar/po.jndi.properties" byline="true"
                     match="^(java.naming.security.principal)=.*"
                     replace="# modified by installer ${line.separator}\1=${po.username}"/>

      <replaceregexp file="${temp.dir}/pa-ejb-jar/po.jndi.properties" byline="true"
                     match="^(java.naming.security.credentials)=.*"
                     replace="# modified by installer ${line.separator}\1=${po.pass}"/>

      <move file="${pa-ear.dir.dist}/${pa-ear.ear.file}" tofile="${pa-ear.dir.dist}/${pa-ear.ear.file}.orig"/>
      <move file="${temp.dir}/pa-ear/pa-ejb.jar" tofile="${temp.dir}/pa-ejb.jar.orig"/>
      <move file="${temp.dir}/pa-ear/pa-web.war" tofile="${temp.dir}/pa-web.war.orig"/>

      <jar jarfile="${temp.dir}/pa-ear/pa-ejb.jar"
           compress="true"
           index="false"
           basedir="${temp.dir}/pa-ejb-jar"/>

      <war destfile="${temp.dir}/pa-ear/pa-web.war"
           compress="true"
           index="false"
           basedir="${temp.dir}/pa-web-war"/>

      <ear destfile="${pa-ear.dir.dist}/${pa-ear.ear.file}"
           basedir="${temp.dir}/pa-ear"
           compress="false"
           appxml="${temp.dir}/pa-ear/META-INF/application.xml" />

      <runtarget target="install:pa-ear-jboss:app:re-configure-accrual" />

  </target>

  <target name="install:pa-ear-jboss:app:re-configure-accrual" unless="exclude.accrual">
      <mkdir dir="${temp.dir}/accrual-ear"/>
      <delete dir="${temp.dir}/accrual-ear"/>
      <mkdir dir="${temp.dir}/accrual-ear"/>

      <unzip src="${pa-ear.dir.dist}/${accrual-ear.ear.file}" dest="${temp.dir}/accrual-ear"/>
      <unzip src="${temp.dir}/accrual-ear/accrual-services.jar" dest="${temp.dir}/accrual-services-jar"/>
      <unzip src="${temp.dir}/accrual-ear/accrual.war" dest="${temp.dir}/accrual-war"/>
	  <move file="${temp.dir}/accrual-war/WEB-INF/classes/AccrualWebTooltips.properties" todir="${tooltips.filepath.loc}" overwrite="true" />
      <echo message="Looking for quartz_jobs.xml in ${temp.dir}/accrual-war"/>
      <copy todir="${temp.dir}/accrual-war/WEB-INF/classes" filtering="true" overwrite="true">
          <fileset dir="${temp.dir}/accrual-war">
              <include name="quartz_jobs.xml"/>
          </fileset>
          <filterset begintoken="$${" endtoken="}">
              <filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}"/>
          </filterset>
      </copy>
      <delete file="${temp.dir}/accrual-war/quartz_jobs.xml"/>

      <delete file="${temp.dir}/accrual-services-jar/paear.properties"/>
      <echo message="Looking for paear.properties in ${pa-ear.dir.dist}"/>
      <copy todir="${temp.dir}/accrual-services-jar" filtering="true">
          <fileset dir="${pa-ear.dir.dist}">
              <include name="paear.properties"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>

      <delete file="${temp.dir}/accrual-ear/META-INF/security-config.xml"/>
      <copy todir="${temp.dir}/accrual-ear/META-INF" filtering="true">
          <fileset dir="${jboss-conf.dir.dest}">
               <include name="accrual-security-config.xml"/>
          </fileset>
          <filterset refid="embedded.filterset"/>
      </copy>
      <move file="${temp.dir}/accrual-ear/META-INF/accrual-security-config.xml" tofile="${temp.dir}/accrual-ear/META-INF/security-config.xml"/>

      <!-- Filter contents of the files below to be based on install time properties. Paths below are paths witin the ear. -->
      <var name="file.list"
        value="accrual-services-jar/jndi.properties,accrual-services-jar/pa.jndi.properties,accrual-services-jar/po.jndi.properties"/>

      <for list="${file.list}" param="file.relative.name">
        <sequential>
          <propertyregex property="file.name"
            input="@{file.relative.name}"
            regexp="^.*\/(.*)"
            select="\1"
            override="true"
            />
          <propertyregex property="relative.dir"
            input="@{file.relative.name}"
            regexp="^(.*)\/.*"
            select="\1"
            override="true"
            />
          <echo message="relative.dir=${relative.dir} file.name=${file.name}"/>
          <replace file="${temp.dir}/${relative.dir}/${file.name}" token="%%" value="@"/>
          <copy todir="${temp.dir}" file="${temp.dir}/${relative.dir}/${file.name}" filtering="true" overwrite="true">
            <filterset>
                <filter token="database.dialect" value="${database.dialect}"/>
                <filter token="database.driver" value="${database.driver}"/>
                <filter token="application.url" value="${application.url}" />
                <filter token="database.url" value="${database.url}" />
                <filter token="database.user" value="${database.user}" />
                <filter token="database.password" value="${database.password}" />
                <filter token="po.jnp.url" value="jnp://${po.server.name}:${po.port.number}" />
                <filter token="pa.jnp.url" value="jnp://${jboss.server.hostname}:${jboss.server.jndi.port}" />
                <filter token="accrual.jnp.url" value="jnp://${jboss.server.hostname}:${jboss.server.jndi.port}" />
                <filter token="po.port.number" value="${po.port.number}" />
                <filter token="jboss.server.hostname" value="${jboss.server.hostname}" />
                <filter token="gridServicePrincipal" value="${grid.security.jndi.principal}"/>
                <filter token="gridServiceCredential" value="${grid.security.jndi.credentials}"/>
                <filter token="po.username" value="${po.username}"/>
                <filter token="po.pass" value="${po.pass}"/>
                <filter token="po.server.name" value="${po.server.name}"/>
                <filter token="grid.dorian.url" value="${grid.dorian.url}"/>
                <filter token="gridgrouper.url" value="${gridgrouper.url}"/>
                <filter token="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
                <filter token="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
                <filter token="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
                <filter token="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
            </filterset>
          </copy>
          <copy todir="${temp.dir}/${relative.dir}" file="${temp.dir}/${file.name}" overwrite="true"/>
        </sequential>
      </for>

      <move file="${pa-ear.dir.dist}/${accrual-ear.ear.file}" tofile="${pa-ear.dir.dist}/${accrual-ear.ear.file}.orig"/>
      <move file="${temp.dir}/accrual-ear/accrual-services.jar" tofile="${temp.dir}/accrual-services.jar.orig"/>
      <move file="${temp.dir}/accrual-ear/accrual.war" tofile="${temp.dir}/accrual.war.orig"/>

      <jar jarfile="${temp.dir}/accrual-ear/accrual-services.jar"
           compress="true"
           index="false"
           basedir="${temp.dir}/accrual-services-jar"/>

      <war destfile="${temp.dir}/accrual-ear/accrual.war"
           compress="true"
           index="false"
           basedir="${temp.dir}/accrual-war"/>

      <ear destfile="${pa-ear.dir.dist}/${accrual-ear.ear.file}"
           basedir="${temp.dir}/accrual-ear"
           compress="false"
           appxml="${temp.dir}/accrual-ear/META-INF/application.xml" />

  </target>


  <target name="install:pa-ear-jboss:accrual-ear" unless="exclude.accrual">
      <!-- added to ensure working.dirs are fresh for our install -->
      <delete dir="${jboss.home}/server/${jboss.server.name}/tmp" failonerror="false"/>
      <delete dir="${jboss.home}/server/${jboss.server.name}/work" failonerror="false"/>
      <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server.log.${install.time}" failonerror="false"/>

      <mkdir dir="${accrual.batch.upload.filepath.loc}" />
      <available file="${accrual.batch.upload.filepath.loc}" property="accrual.batch.upload.filepath.exists" />
      <fail unless="accrual.batch.upload.filepath.exists" message="The accrual batch upload dir at ${accrual.batch.upload.filepath.loc} has not been created." />

      <copy file="${pa-ear.dir.dist}/${accrual-ear.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />

      <!-- deploy jars to server lib -->
      <copy todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true">
          <fileset dir="${pa-container-jar.dist.dir}">
              <exclude name="servlet-2.2.jar"/>
          </fileset>
      </copy>
  </target>

  <target name="install:pa-ear-jboss:configure" unless="exclude.pa-ear">

    <!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
    <if>
        <equals arg1="${jboss.major.version}" arg2="4"/>
        <then>
            <jboss-configure
                jboss.grid.configure="true"
                />
            <if>
                <equals arg1="${jboss.cgmm.enable}" arg2="true"/>
                <then>
                    <jboss-configure-cgmm
                        />
                </then>
            </if>
        </then>
    </if>
    <if>
        <equals arg1="${jboss.major.version}" arg2="5"/>
        <then>
            <jboss-configure
                jboss.grid.configure="true"
                jboss.server.bindingfile.location="${jboss.home}/server/${jboss.server.name}/conf/bindingservice.beans/META-INF/bindings-jboss-beans.xml"
                jboss.server.binding.template.location="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings-jboss-beans.xml"
                jboss.server-xml.file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb.sar/server.xml"
                jboss.server.ports.name="PortsDefaultBindings"
                proxy.update.connector.port.ssl="${jboss.ssl.port}"
                />
            <jboss51-encrypt-messaging-passwd
                />
        </then>
    </if>
    <!-- this one needs to be removed but CSM team wants to keep in their dependency tree -->
    <delete file="${jboss.home}/server/${jboss.server.name}/deploy/jbossweb-tomcat55.sar/xmlsec-1.2.1.jar" />
  </target>

  <!-- Calls to bda macros for basic functionality -->
  <target name="install:pa-ear-jboss:stop" unless="exclude.pa-ear">
    <jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}" jboss.server.name="${jboss.server.name}" sleep.time="20"/>
  </target>

    <target name="install:pa-ear-jboss:start" unless="exclude.pa-ear">
    <if>
      <not>
        <isset property="exclude.start.servers"/>
      </not>
      <then>
          <jboss-start-jboss
              jboss.server.name="${jboss.server.name}"
              />
      </then>
    </if>
    </target>

    <target name="install:pa-ear-jboss:validation:pre-install" description="Runs pre-install validation checks bda-utils"
        unless="exclude.pa-ear" depends="
        common:pa-ear-jboss:init,common:init,
        install:common:validation:pre-install
        ">
        <validate-pre-install-jboss
            />
    </target>
    <target name="install:pa-ear-jboss:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
        unless="exclude.pa-ear" depends="
        common:init,
        install:pa-ear-jboss:stop
        ">
        <validate-pre-jboss-ports
            />
    </target>
    <target name="install:pa-ear-jboss:validation:post-install" description="Run post-install checks from bda-utils"
        unless="exclude.pa-ear" depends="
        common:pa-ear-jboss:init,
        common:init,
        install:pa-ear-jboss:start
        ">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <validate-post-jboss
                    jboss.application.url="${jboss.application.url}"
                    />
            </then>
        </if>
    </target>

  <!-- Wrapper target to deploy JBOSS container -->
  <target name="install:pa-ear-jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.pa-ear"
      depends="
        common:pa-ear-jboss:init,
        common:init,
      install:pa-ear-jboss:init,
      install:pa-ear-jboss:validation:pre-install,
      install:common:validation:pre-install,
      install:pa-ear-jboss:stop,
      install:pa-ear-jboss:validation:pre-install:ports,
      install:pa-ear-jboss:clean,
      install:pa-ear-jboss:binaries,
      install:pa-ear-jboss:configure,
      install:pa-ear-jboss:app:re-configure,
      install:pa-ear-jboss:app,
      install:pa-ear-jboss:app:configure,
      install:pa-ear-jboss:post,
      install:pa-ear-jboss:start,
      install:pa-ear-jboss:validation:post-install
      " >
  </target>

  <target name="upgrade-dac:pa-ear-jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.pa-ear"
      depends="
      upgrade:pa-ear-jboss:init,
      common:pa-ear-jboss:init,
      common:init,
      install:pa-ear-jboss:init,
      install:pa-ear-jboss:validation:pre-install,
      install:common:validation:pre-install,
      install:pa-ear-jboss:stop,
      install:pa-ear-jboss:validation:pre-install:ports,
      install:pa-ear-jboss:clean,
      install:pa-ear-jboss:binaries,
      install:pa-ear-jboss:configure,
      install:pa-ear-jboss:app:re-configure,
      install:pa-ear-jboss:app,
      install:pa-ear-jboss:app:configure,
      upgrade:pa-ear-jboss:post,
      install:pa-ear-jboss:post,
      install:pa-ear-jboss:start,
      install:pa-ear-jboss:validation:post-install
      " >
  </target>
  <target name="upgrade-cm:pa-ear-jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.pa-ear"
      depends="
      upgrade:pa-ear-jboss:init,
      common:pa-ear-jboss:init,
      common:init,
      install:pa-ear-jboss:init,
      install:pa-ear-jboss:validation:pre-install,
      install:common:validation:pre-install,
      install:pa-ear-jboss:stop,
      install:pa-ear-jboss:validation:pre-install:ports,
      install:pa-ear-jboss:configure,
      install:pa-ear-jboss:app:re-configure,
      install:pa-ear-jboss:app,
      install:pa-ear-jboss:app:configure,
      upgrade:pa-ear-jboss:post,
      install:pa-ear-jboss:post,
      install:pa-ear-jboss:start,
      install:pa-ear-jboss:validation:post-install
      " >
  </target>

  <target name="upgrade-ncm:pa-ear-jboss" description="Wrapper scripts that calls all required targets to install the jboss container" unless="exclude.pa-ear"
      depends="
      upgrade:pa-ear-jboss:init,
      common:pa-ear-jboss:init,
      common:init,
      install:pa-ear-jboss:init,
      install:pa-ear-jboss:validation:pre-install,
      install:common:validation:pre-install,
      install:pa-ear-jboss:stop,
      install:pa-ear-jboss:validation:pre-install:ports,
      install:pa-ear-jboss:app:re-configure,
      install:pa-ear-jboss:app,
      install:pa-ear-jboss:app:configure,
      upgrade:pa-ear-jboss:post,
      install:pa-ear-jboss:post,
      install:pa-ear-jboss:start,
      install:pa-ear-jboss:validation:post-install
      " >
  </target>

  <target name="install:pa-ear-jboss:post" unless="exclude.pa-ear">
    <if>
      <not>
        <equals arg1="${exclude.jboss.backup}" arg2="true"/>
      </not>
      <then>
        <property name="changelogFile" location="${log.dir}/changeLog-${install.time}.txt"/>
        <property name="compare1.dir" location="${backup.pa-ear-jboss.base.dir}/backup/${jboss.binaries.relative.dir}"/>
        <property name="compare2.dir" location="${jboss.home}"/>
        <report-dir-diff
          dir1="${compare1.dir}"
          dir2="${compare2.dir}"
          reportFile="${changelogFile}"
          />
        <!-- Copy app server logs -->
        <mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
        <mkdir dir="${backup.pa-ear-jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log"/>
        <!-- so the logs wont be included in the zip -->
        <move todir="${jboss.home}/server/${jboss.server.name}/log">
          <fileset dir="${backup.pa-ear-jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log">
            <include name="*"/>
          </fileset>
        </move>

        <!-- Compress backup and cleanup -->
        <mkdir dir="${backup.pa-ear-jboss.base.dir}/backup1"/>
        <zip destfile="${backup.pa-ear-jboss.base.dir}/backup1/${jboss.binaries.relative.dir}.zip" basedir="${backup.pa-ear-jboss.base.dir}/backup" />
        <delete dir="${backup.pa-ear-jboss.base.dir}/backup"/>
      </then>
    </if>
  </target>

  <target name="upgrade:pa-ear-jboss:init"
      depends="
      upgrade:pa-ear-jboss:init:prep,
      upgrade:pa-ear-jboss:readers:bda,
      upgrade:pa-ear-jboss:readers:custom
      ">
      <properties-print
          properties.list="${read.properties.list}"
          />
      <properties-exist
          properties.list="${read.properties.list}"
          />
      <properties-write
          properties.list="${read.properties.list}"
          />
  </target>

  <target name="upgrade:pa-ear-jboss:init:prep" depends="upgrade:common:init:prep">
      <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
      <jboss-version
          />
      <if>
          <equals arg1="${jboss.ncicb-standard.port-config}" arg2="true"/>
          <then>
              <property name="jboss.server.binding.template.location" value="${basedir}/${jboss-bindings.file}"/>
          </then>
          <else>
              <property name="jboss.server.binding.template.location" value="${bda-utils.dir}/resource/${jboss.binaries.relative.dir}/bindings.xml"/>
          </else>
      </if>

      <!-- Upgrades always use port configs
      <property name="jboss.ncicb-standard.port-config" value="true"/>
      -->
      <available file="${jboss.home}" property="jboss.exists"/>
      <property name="read.jboss.home" value="${jboss.home}"/>
      <echo message="jboss.exists - ${jboss.exists}"/>
  </target>

  <target name="upgrade:pa-ear-jboss:readers:custom">
      <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
  </target>

  <target name="upgrade:pa-ear-jboss:readers:bda" if="jboss.exists">
  </target>

  <target name="upgrade:pa-ear-jboss:post">
  </target>
</project>

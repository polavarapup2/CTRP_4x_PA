<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- commons ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="commons" default="package" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <property name="tier" value="LOCAL"/>
    <property file="${basedir}/../../build-pa/tier-properties/build-lite-${tier}.properties"/>
    <property file="${basedir}/../../build-pa/build-lite.properties"/>
    <property file="${basedir}/../../build-pa/version.properties"/>
    <property name="commons.coverage.line" value="65"/>
    <property name="commons.coverage.branch" value="48"/>
    <property name="commons.pmd.maxerrors" value="57"/>

    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="commons.dir" value="${pa.dir}/commons"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property name="pa.resourceDir" value="${pa.dir}/resources"/>
    <property name="pa.test.resourceDir" value="${pa.dir}/commons/test/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="${pa.resourceDir}/checkstyle.xml"/>
    <property name="java.major.version" value="1.7"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="commons.build.finalName" value="pa-commons"/>
    <property name="commons.build.dir" value="${commons.dir}/target"/>
	<property name="commons.build.srcgenDir" value="${commons.build.dir}/generated-src"/>
    <property name="commons.build.outputDir" value="${commons.build.dir}/classes"/>
    <property name="commons.build.srcDir.0" value="${commons.dir}/src/java"/>
    <property name="commons.build.resourceDir.0" value="${commons.dir}/src/resources"/>
    <property name="commons.build.testOutputDir" value="${commons.build.dir}/test-classes"/>
    <property name="commons.build.testDir.0" value="${commons.dir}/test/java"/>
    <property name="commons.build.testResourceDir.0" value="${commons.dir}/test/resources"/>
    <property name="commons.test.reports" value="${pa.report.dir}/commons/test-reports"/>
    <property name="commons.coverage.reports" value="${pa.report.dir}/commons/coverage-reports"/>
    <property name="commons.reporting.outputDirectory" value="${pa.report.dir}/commons/site"/>
    <property name="commons.jar" value="${commons.build.finalName}.jar"/>
    <property name="commons-test.jar" value="${commons.build.finalName}-test.jar"/>
    <property name="commons.build.coberturaOutputDir" value="${commons.build.dir}/generated-classes"/>
    <property name="commons.build.javadoc" value="${commons.build.dir}/javadoc"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>

    <!-- Test properties, override in build.properties if necessary -->
    <property name="test.jdbc.driverClassName" value="org.hsqldb.jdbcDriver"/>
    <property name="test.jdbc.url" value="jdbc:hsqldb:mem:pa-test"/>
    <property name="test.jdbc.username" value="sa"/>
    <property name="test.jdbc.password" value=""/>
    <property name="test.hibernate.dialect" value="gov.nih.nci.pa.util.CustomHSQLDialect"/>
    <property name="test.schema.showsql" value="false"/>

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="build.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="*.jar"/>
        </fileset>
   </path>

   <path id="compile.classpath">
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <fileset dir="${lib.dir}/test">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-findbugs.classpath">
        <fileset dir="${lib.dir}/test-findbugs">
            <include name="*.jar"/>
        </fileset>
    </path>


    <path id="test-simian.classpath">
        <fileset dir="${lib.dir}/test-simian">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-junit.classpath">
        <fileset dir="${lib.dir}/test-junit">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-cobertura.classpath">
        <fileset dir="${lib.dir}/test-cobertura">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-checkstyle.classpath">
        <fileset dir="${lib.dir}/test-checkstyle">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-pmd.classpath">
        <fileset dir="${lib.dir}/test-pmd">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-selenium.classpath">
        <fileset dir="${lib.dir}/test-selenium">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${commons.build.dir}" failonerror="false"/>
        <delete dir="${pa.report.dir}/commons" failonerror="false"/>
        <mkdir dir="${pa.report.dir}/commons"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

	<target name="run-xjc" description="Generates JAXB classes">
		<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task" classpathref="build.classpath"/>
		<mkdir dir="${commons.build.srcgenDir}"/>

		<xjc destdir="${commons.build.srcgenDir}" extension="true" package="gov.nih.nci.po.ws.common.types">
		  <schema  dir="${commons.build.resourceDir.0}" includes="po.xsd"/>
		  <arg value="-Xfluent-api" />
		  <arg value="-Xannotate" />
		</xjc>
	</target>

    <target name="compile" depends="run-xjc" description="Compile the code">
        <mkdir dir="${commons.build.outputDir}"/>
        <!-- Only needed here to keep eclipse happy -->
        <mkdir dir="${commons.build.testOutputDir}"/>

        <javac destdir="${commons.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" source="${java.major.version}" verbose="false" fork="false" encoding="${java.encoding}">
            <src>
            	<pathelement location="${commons.build.srcgenDir}"/>
                <pathelement location="${commons.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>

        <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
        <copy todir="${commons.build.outputDir}" filtering="true">
            <fileset dir="${commons.build.resourceDir.0}"/>
        </copy>

    	<propertyfile file="${commons.build.outputDir}/pa-common.properties">
    		<entry  key="keystore.password" value="${keystore.password}"/>
    	</propertyfile>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure test compilation target                                      -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy todir="${commons.build.testOutputDir}" overwrite="true" filtering="true">
            <fileset dir="${pa.test.resourceDir}"/>
            <filterset>
                <filter token="test.jdbc.driverClassName" value="${test.jdbc.driverClassName}"/>
                <filter token="test.jdbc.url" value="${test.jdbc.url}"/>
                <filter token="test.jdbc.username" value="${test.jdbc.username}"/>
                <filter token="test.jdbc.password" value="${test.jdbc.password}"/>
                <filter token="test.hibernate.dialect" value="${test.hibernate.dialect}"/>
                <filter token="test.schema.showsql" value="${test.schema.showsql}"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile, configure-tests" description="Compile the test code">
        <mkdir dir="${commons.build.testOutputDir}"/>
        <javac destdir="${commons.build.testOutputDir}" nowarn="false" debug="true" optimize="false" encoding="${java.encoding}"
               deprecation="true" target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}">
            <src>
                <pathelement location="${commons.build.testDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${commons.build.outputDir}"/>
                <path refid="test-selenium.classpath"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
            </classpath>
        </javac>
        <copy todir="${commons.build.testOutputDir}">
            <fileset dir="${commons.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${commons.test.reports}"/>
        <junit printSummary="no" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${commons.build.testOutputDir}"/>
            <classpath location="${commons.build.coberturaOutputDir}"/>
            <classpath location="${commons.build.outputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${commons.test.reports}" fork="yes" unless="test">
                <fileset dir="${commons.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">

        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />

        <delete file="${commons.build.dir}/cobertura.ser" />

        <cobertura-instrument datafile="${commons.build.dir}/cobertura.ser"
                              toDir="${commons.build.coberturaOutputDir}" ignoreTrivial="true">
            <fileset dir="${commons.build.outputDir}">
                <include name="**/*.class" />
            	<exclude name="**/StudyIdentifierType.class"/>
            	<exclude name="**/StudyProtocolFlag.class"/>
            	<exclude name="**/StudyProtocolFlagDTO.class"/>
            	<exclude name="**/StudyFlagReasonCode.class"/>
            	<exclude name="**/ProgramCode.class"/>
            	<exclude name="**/Family.class"/>
            	<exclude name="**/gov/nih/nci/po/ws/common/types/*.class" />
            	<exclude name="**/AccessLoggingFilter.class"/>
            	<exclude name="**/WebServiceAccessLog.class"/>
            	<exclude name="**/testsupport/*.class" />
            </fileset>
        	<auxClasspath>
                 <path refid="compile.classpath"/>
            </auxClasspath>
        </cobertura-instrument>

        <mkdir dir="${commons.test.reports}"/>
        <junit printSummary="off" haltonerror="false" haltonfailure="false" fork="true" dir="." showoutput="false" failureproperty="junit.failure" forkMode="once" >
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${commons.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${commons.build.testOutputDir}"/>
            <classpath location="${commons.build.coberturaOutputDir}"/>
            <classpath location="${commons.build.outputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <batchtest todir="${commons.test.reports}">
                <fileset dir="${commons.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${commons.test.reports}">
            <fileset dir="${commons.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${commons.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${commons.test.reports}."/>
        <cobertura-report datafile="${commons.build.dir}/cobertura.ser"
                          destdir="${commons.coverage.reports}"
                          srcdir="${commons.build.srcDir.0}" />

        <cobertura-report datafile="${commons.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${commons.coverage.reports}"
                          srcdir="${commons.build.srcDir.0}" />

        <cobertura-check datafile="${commons.build.dir}/cobertura.ser"
                         totalbranchrate="${commons.coverage.branch}"
                         totallinerate="${commons.coverage.line}"
                         haltonfailure="true"/>
     </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle config="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <pathelement location="${commons.build.outputDir}"/>
                <path refid="compile.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <!-- <formatter type="plain"/> -->
            <formatter type="plain" toFile="${pa.report.dir}/commons/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/commons/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd minimumPriority="3" shortFilenames="false" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxRuleViolations="${commons.pmd.maxerrors}">
            <formatter type="text" toConsole="false"/>
            <formatter type="text" toFile="${pa.report.dir}/commons/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/commons/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/commons/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         <sourceLanguage name="java" version="1.7"/></pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Find Bugs                                                             -->
    <!-- ====================================================================== -->

    <target name="test-findbugs">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="test-findbugs.classpath"/>
    	<findbugs reportLevel="high" failOnError="true" classpathref="test-findbugs.classpath"
    	              output="xml:withMessages" warningsProperty="bugsFound" maxrank="14" projectname="pa-commons"
    	              outputFile="${pa.report.dir}/commons/findbugs.xml" >
		  <auxClasspath>
		    <path refid="compile.classpath"/>
		  </auxClasspath>
	      <sourcePath path="${commons.build.srcDir.0}" />
	      <class location="${commons.build.dir}/${commons.jar}" />
    	</findbugs>
    	<fail if="bugsFound" message="Bugs found! See ${pa.report.dir}/commons/findbugs.xml for details."/>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/commons/simian.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/commons/simian.xml"/>
            <!-- <formatter type="plain"/> -->
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="jar,jar-test,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="jar,jar-test,test-checkstyle,test-pmd,test-simian,test-findbugs"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>

    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="jar" depends="compile">
        <jar jarfile="${commons.build.dir}/${commons.jar}"
             compress="true"
             index="false"
             basedir="${commons.build.outputDir}"/>
    </target>

    <target name="jar-test" depends="compile-tests">
        <jar jarfile="${commons.build.dir}/${commons-test.jar}"
             compress="true"
             index="false"
             basedir="${commons.build.testOutputDir}" />
    </target>

    <target name="package-notest" depends="compile,jar,jar-test"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="clean,compile,jar,jar-test,test-all"
            description="Package the application"/>

    <target name="package-client" depends="package-notest"
            description="Package the client jar."/>

    <!-- ====================================================================== -->
    <!-- Maven Installation Targets                                             -->
    <!-- ====================================================================== -->
    <target name="maven:generate-pom">
        <!-- We cannot use in memory poms due to a bug: http://jira.codehaus.org/browse/MANTTASKS-170 -->
        <taskdef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="build.classpath" />
        <artifact:pom id="commons-pom-temp" groupId="gov.nih.nci.coppa.pa" artifactId="pa-commons" version="${pa.clients.version}" name="PA Commons"/>
        <artifact:writepom pomRefId="commons-pom-temp" file="target/pom.xml"/>
        <artifact:pom id="commons-pom" file="target/pom.xml"/>
    </target>

    <target name="maven:install" depends="package,maven:generate-pom">
        <echo message="Installing version ${pa.clients.version} to the local maven repo."/>
        <artifact:install file="target/${commons.jar}">
            <pom refid="commons-pom"/>
            <attach file="target/${commons-test.jar}" type="jar" classifier="test"/>
        </artifact:install>
    </target>

    <target name="maven:deploy" depends="package,maven:generate-pom">
        <artifact:remoteRepository id="remote.repository" url="https://ncimvn.nci.nih.gov/nexus/content/repositories/snapshots/">
            <authentication username="${maven.username}" password="${maven.password}"/>
        </artifact:remoteRepository>
        <echo message="Installing version ${pa.clients.version} to the remote maven repo."/>
        <artifact:deploy file="target/${commons.jar}" uniqueversion="false">
            <remoteRepository refid="remote.repository" />
            <pom refid="commons-pom"/>
            <attach file="target/${commons-test.jar}" type="jar" classifier="test"/>
        </artifact:deploy>
    </target>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <mkdir dir="${commons.build.javadoc}"/>
        <javadoc destdir="${commons.build.javadoc}"
            sourcepath="${commons.build.srcDir.0}"
            windowtitle="CTRP PA Commons">
            <doctitle><![CDATA[<h1>CTRP PA Commons</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javadoc>
    </target>

</project>

<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- pa-webservices ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="pa-webservices" default="package" basedir=".">
    <property name="tier" value="LOCAL"/>
    <property file="${basedir}/../../build-pa/tier-properties/build-lite-${tier}.properties"/>
    <property file="${basedir}/../../build-pa/build-lite.properties"/>
    <property file="${basedir}/../../build-pa/version.properties"/>
    <property name="pa-webservices.coverage.line" value="91"/>
    <property name="pa-webservices.coverage.branch" value="77"/>
    <property name="pa-webservices.pmd.maxerrors" value="13"/>

    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${software.dir}/pa/build.properties"/>
    <property name="pa.resourceDir" value="${software.dir}/pa/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="${pa.resourceDir}/checkstyle.xml"/>
    <property name="java.major.version" value="1.7"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="pa-ejb.build.dir" value="${pa.dir}/pa-ejb/target"/>

    <property name="pa-webservices.build.finalName" value="pa-webservices"/>
    <property name="pa-webservices.build.dir" value="${pa.dir}/pa-webservices/target"/>
    <property name="pa-webservices.build.outputDir" value="${pa-webservices.build.dir}/classes"/>
    <property name="pa-webservices.build.srcDir.0" value="${pa.dir}/pa-webservices/src/java"/>
	<property name="pa-webservices.build.srcgenDir" value="${pa-webservices.build.dir}/generated-src"/>
    <property name="pa-webservices.build.resourceDir.0" value="${pa.dir}/pa-webservices/src/resources"/>
    <property name="pa-webservices.build.testOutputDir" value="${pa-webservices.build.dir}/test-classes"/>
    <property name="pa-webservices.build.testDir.0" value="${pa.dir}/pa-webservices/test/java"/>
    <property name="pa-webservices.build.integrationTestDir.0" value="${pa.dir}/pa-webservices/test-integration/java"/>
    <property name="pa-webservices.build.testResourceDir.0" value="${pa.dir}/pa-webservices/test/resources"/>
    <property name="pa-webservices.test.reports" value="${pa.report.dir}/pa-webservices/test-reports"/>
    <property name="pa-webservices.coverage.reports" value="${pa.report.dir}/pa-webservices/coverage-reports"/>
    <property name="pa-webservices.reporting.outputDirectory" value="${pa.report.dir}/pa-webservices/site"/>
    <property name="pa-webservices.war" value="${pa-webservices.build.finalName}.war"/>
    <property name="pa-webservices.build.coberturaOutputDir" value="${pa-webservices.build.dir}/generated-classes"/>
    <property name="pa-webservices.build.javadoc" value="${pa-webservices.build.dir}/javadoc"/>

	<property name="pa-web.build.integrationTestDir.0" value="${pa.dir}/pa-web/test-integration/java"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>

    <property name="database.upgrades.dir" value="${basedir}/../dbscripts/db-upgrade"/>

    <property name="selenium.delay" value="50"/>
	<property name="webdriver.class" value="org.openqa.selenium.firefox.FirefoxDriver"/>
	<property name="phantomjs.binary.path" value="/local/home/cislave/phantomjs-1.9.7-linux-x86_64/bin/phantomjs"/>


    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="build.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="pa-ejb.package.test.classpath">
        <fileset dir="${pa.dir}/pa-ejb/target">
            <include name="*-test.jar"/>
        </fileset>
    </path>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}/pa-webservices">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="selenium.classpath">
        <fileset dir="${lib.dir}/test-selenium">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <fileset dir="${lib.dir}/test">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/pa-webservices">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-simian.classpath">
        <fileset dir="${lib.dir}/test-simian">
            <include name="*.jar"/>
        </fileset>
    </path>

	<path id="test-findbugs.classpath">
        <fileset dir="${lib.dir}/test-findbugs">
            <include name="*.jar"/>
        </fileset>
	</path>

    <path id="test-junit.classpath">
        <fileset dir="${lib.dir}/test-junit">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-cobertura.classpath">
        <fileset dir="${lib.dir}/test-cobertura">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-checkstyle.classpath">
        <fileset dir="${lib.dir}/test-checkstyle">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-pmd.classpath">
        <fileset dir="${lib.dir}/test-pmd">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ejb.package.classpath">
    	<dirset dir="${pa.dir}/pa-ejb/target/classes"></dirset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="build.classpath"/>
    <taskdef resource="liquibasetasks.properties" classpathref="build.classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${pa-webservices.build.dir}"/>
        <delete dir="${pa.report.dir}/pa-webservices"/>
        <mkdir dir="${pa.report.dir}/pa-webservices"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

	<target name="run-xjc" description="Generates JAXB classes">
		<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task" classpathref="build.classpath"/>
        <mkdir dir="${pa-webservices.build.srcgenDir}"/>
        <xjc destdir="${pa-webservices.build.srcgenDir}" extension="true">
        	  <schema  dir="${pa-webservices.build.resourceDir.0}" includes="ws.xsd"/>
        </xjc>
	</target>

    <target name="compile" depends="run-xjc" description="Compile the code">
        <mkdir dir="${pa-webservices.build.outputDir}"/>
        <javac destdir="${pa-webservices.build.outputDir}" nowarn="false" debug="true"
               optimize="false" deprecation="true" target="${java.major.version}" verbose="false" fork="false"
               source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-webservices.build.srcDir.0}"/>
            	<pathelement location="${pa-webservices.build.srcgenDir}"/>
            </src>
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
        </javac>
        <copy file="${pa.resourceDir}/csm.properties" todir="${pa-webservices.build.outputDir}" overwrite="true">
            <filterset>
                <filter token="database.driver" value="${jdbc.driver}" />
                <filter token="database.url" value="${jdbc.url}" />
                <filter token="database.user" value="${db.username}" />
                <filter token="database.password" value="${db.password}" />
                <filter token="database.dialect" value="${hibernate.dialect}" />
            </filterset>
        </copy>
        <copy todir="${pa-webservices.build.outputDir}">
            <filterset>
                <filter token="ldap.url" value="${ldap.url}"/>
                <filter token="ldap.user" value="${ldap.user}"/>
                <filter token="ldap.password" value="${ldap.password}"/>
                <filter token="ldap.security.authentication" value="${ldap.security.authentication}"/>
                <filter token="ldap.security.protocol" value="${ldap.security.protocol}"/>
                <filter token="ldap.timeouts.connect" value="${ldap.timeouts.connect}"/>
                <filter token="ldap.timeouts.read" value="${ldap.timeouts.read}"/>
                <filter token="ldap.context" value="${ldap.context}"/>
                <filter token="ldap.uid.attrname" value="${ldap.uid.attrname}"/>
                <filter token="ldap.migration.grouperToIdStringMap" value="${ldap.migration.grouperToIdStringMap}"/>
                <filter token="ldap.migration.excludes" value="${ldap.migration.excludes}"/>
            </filterset>
            <fileset dir="${pa-webservices.build.resourceDir.0}" />
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure tests target                                                 -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy file="${pa.resourceDir}/test.properties.pa-webservices" tofile="${pa-webservices.build.testResourceDir.0}/test.properties" overwrite="true">
            <filterset>
                <filter token="pa.server.name" value="${pa.server.name}"/>
                <filter token="jboss.port" value="${jboss.port}" />
                <filter token="selenium.server.port" value="${selenium.server.port}"/>
                <filter token="selenium.delay" value="${selenium.delay}" />
            	<filter token="webdriver.class" value="${webdriver.class}" />
            	<filter token="phantomjs.binary.path" value="${phantomjs.binary.path}" />
            	<filter token="jdbc.driver" value="${jdbc.driver}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
                <filter token="db.username" value="${db.username}"/>
                <filter token="db.password" value="${db.password}"/>
            </filterset>
        </copy>
        <replaceregexp file="${pa-webservices.build.testResourceDir.0}/test.properties" match="\\" replace="/" flags="g"/>
        <copy file="${database.upgrades.dir}/db-upgrade.xml" tofile="${pa-webservices.build.testResourceDir.0}/db-upgrade.xml" overwrite="true">
            <filterset>
                <filter token="db-upgrade.run.dir" value="${database.upgrades.dir}/postgresql"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Create artifacts                                                       -->
    <!-- ====================================================================== -->

    <target name="create-artifacts">
        <echo message="creating login.config"/>
        <filter token="jdbc.driver" value="${jdbc.driver}"/>
        <filter token="jdbc.url" value="${jdbc.url}"/>
        <filter token="db.username" value="${db.username}"/>
        <filter token="db.password" value="${db.password}"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile,configure-tests,create-artifacts" description="Compile the test code">
        <mkdir dir="${pa-webservices.build.testOutputDir}"/>
        <javac destdir="${pa-webservices.build.testOutputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-webservices.build.testDir.0}"/>
                <pathelement location="${pa-webservices.build.integrationTestDir.0}"/>
            	<pathelement location="${pa-web.build.integrationTestDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${pa-webservices.build.outputDir}"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
                <path refid="selenium.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
                <path refid="pa-ejb.package.test.classpath"/>
            </classpath>
        </javac>
        <copy todir="${pa-webservices.build.testOutputDir}">
            <fileset dir="${pa-webservices.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle config="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <!-- <formatter type="plain"/> -->
            <formatter type="plain" toFile="${pa.report.dir}/pa-webservices/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-webservices/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd minimumPriority="3" shortFilenames="false" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxruleviolations="${pa-webservices.pmd.maxerrors}">
            <formatter type="text" toConsole="false"/>
            <formatter type="text" toFile="${pa.report.dir}/pa-webservices/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/pa-webservices/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/pa-webservices/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
        <sourceLanguage name="java" version="1.7"/></pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Find Bugs                                                             -->
    <!-- ====================================================================== -->

    <target name="test-findbugs">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="test-findbugs.classpath"/>
        <findbugs reportLevel="high" failOnError="true" classpathref="test-findbugs.classpath"
                      output="xml:withMessages" warningsProperty="bugsFound" maxrank="14" projectname="pa-webservices"
                      outputFile="${pa.report.dir}/pa-webservices/findbugs.xml">
          <auxClasspath>
            <path refid="ejb.package.classpath"/>
            <path refid="compile.classpath"/>
            <path refid="common.package.classpath"/>
          </auxClasspath>
          <sourcePath path="${pa-webservices.build.srcDir.0}" />
          <class location="${pa-webservices.build.outputDir}" />
        </findbugs>
        <fail if="bugsFound" message="Bugs found! See ${pa.report.dir}/pa-webservices/findbugs.xml for details."/>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-webservices/simian.txt"/>
            <formatter type="xml" toFile="${pa.report.dir}/pa-webservices/simian.xml"/>
            <!-- <formatter type="plain"/> -->
        </simian>
    </target>

    <target name="test-integration" description="Runs integration tests against the automatically deploy application."
           depends="init-db-deploy-start-jboss,run-selenium-tests,stop-jboss-server">
    </target>

    <target name="init-db-deploy-start-jboss">
        <ant target="init-db-deploy-start-jboss" dir="${pa.dir}" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="stop-jboss-server">
        <ant target="stop-jboss-server" dir="${pa.dir}" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>


    <!-- ====================================================================== -->
    <!-- Run JUnit Integration Tests                                            -->
    <!-- ====================================================================== -->
    <target name="run-selenium-tests" depends="compile-tests" description="Run integration tests">
        <mkdir dir="${pa-webservices.test.reports}"/>
        <junit maxmemory="1G" printSummary="no" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." showoutput="no" failureproperty="junit.failure">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath>
                <path location="${pa-webservices.build.testOutputDir}"/>
            	<path location="${pa-webservices.build.outputDir}"/>
                <path refid="selenium.classpath"/>
                <path refid="common.package.classpath"/>
            	<path refid="test-junit.classpath"/>
            	<path refid="test.classpath"/>
            	<path refid="ejb.package.classpath"/>
            </classpath>
            <batchtest todir="${pa-webservices.test.reports}">
                <fileset dir="${pa-webservices.build.integrationTestDir.0}">
                    <include name="**/*.java"/>
                	<exclude name="**/Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <condition property="selenium.outcome" value="FAILED!!! See reports in ${pa-webservices.test.reports}" else="passed.">
             <isset property="junit.failure"/>
         </condition>
         <echo>Selenium tests ${selenium.outcome}</echo>

    </target>

    <!-- ====================================================================== -->
    <!--   Recreates the database that tests will be run against                -->
    <!-- ====================================================================== -->
    <target name="init-test-db" depends="configure-tests" description="Recreates the testing database from scratch">
        <sequential>
            <sql driver="${jdbc.driver}" url="${jdbc.base}/template1" userid="${db.username}" password="${db.password}"
                expandproperties="true" onerror="continue" autocommit="true">
                <classpath>
                    <path refid="build.classpath"/>
                </classpath>
                drop database if exists ${db.name};
                create database ${db.name};
                grant all on database ${db.name} to ${db.username};
            </sql>
            <for list="${ci.schema.files}" param="schema.file">
                <sequential>
                    <sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${db.username}" password="${db.password}"
                        src="../dbscripts/db-install/postgresql/@{schema.file}" delimiter="/" delimitertype="row" onerror="abort" autocommit="true" keepformat="true">
                        <classpath>
                            <pathelement location="${build.classpath}" />
                        </classpath>
                    </sql>
                </sequential>
            </for>
            <updateDatabase driver="${jdbc.driver}" url="${jdbc.url}" username="${db.username}" password="${db.password}"
                            classpathref="build.classpath" changeLogFile="${pa-webservices.build.testResourceDir.0}/db-upgrade.xml" />
        </sequential>
    </target>

    <!-- ====================================================================== -->
    <!--   Recreates the database that tests will be run against                -->
    <!-- ====================================================================== -->
    <target name="populate-test-db" depends="configure-tests" description="Populates the testing db with baseline date">
        <sequential>
            <sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${db.username}" password="${db.password}"
                expandproperties="true" onerror="continue" autocommit="true">
                <fileset dir="..">
                    <include name="dbscripts/db-integration/postgresql/disease.sql"/>
                    <include name="pdq/scripts/intervention000.sql"/>
                    <include name="dbscripts/db-integration/postgresql/paCiBootstrapData.sql"/>
                </fileset>
                <classpath>
                    <path refid="build.classpath"/>
                </classpath>
            </sql>
        </sequential>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="compile,compile-tests,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="compile,test-checkstyle,test-pmd,test-simian,test-findbugs"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="war" depends="determine-build-version">
        <mkdir dir="${pa-webservices.build.dir}/${pa-webservices.build.finalName}/WEB-INF/lib"/>
        <copy todir="${pa-webservices.build.dir}/${pa-webservices.build.finalName}/WEB-INF/lib">
            <fileset dir="${lib.dir}/pa-webservices"/>
        </copy>
        <copy todir="${pa-webservices.build.dir}/${pa-webservices.build.finalName}/WEB-INF" file="${pa.dir}/pa-webservices/src/webapp/WEB-INF/web.xml"
            filtering="true">
            <filterset >
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.revision" value="${project.revision}"/>
                <filter token="showErrorStackTraces" value="${showErrorStackTraces}"/>
            </filterset>
        </copy>
        <war destfile="${pa-webservices.build.dir}/${pa-webservices.war}"
             compress="false" duplicate="fail"
             webxml="${pa-webservices.build.dir}/${pa-webservices.build.finalName}/WEB-INF/web.xml">
            <lib dir="${pa-webservices.build.dir}/${pa-webservices.build.finalName}/WEB-INF/lib"/>
            <classes dir="${pa-webservices.build.outputDir}"/>
            <fileset dir="${pa.dir}/pa-webservices/src/webapp"/>
        </war>
    </target>

    <target name="package-notest" depends="compile,war"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="clean,compile,test-all,war"
            description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${pa-webservices.test.reports}"/>
        <junit printSummary="no" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${pa-webservices.build.coberturaOutputDir}"/>
            <classpath location="${pa-webservices.build.outputDir}"/>
            <classpath location="${pa-webservices.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="pa-ejb.package.test.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false">
            </test>
            <batchtest todir="${pa-webservices.test.reports}" fork="yes" unless="test">
                <fileset dir="${pa-webservices.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                	<exclude name="**/BaseTrialRegistrationServiceTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">

        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />

        <delete file="${pa-webservices.build.dir}/cobertura.ser" />

        <cobertura-instrument datafile="${pa-webservices.build.dir}/cobertura.ser"
                              toDir="${pa-webservices.build.coberturaOutputDir}" ignoreTrivial="true">
            <fileset dir="${pa-webservices.build.outputDir}">
                <include name="**/*.class" />
            	<exclude name="**/gov/nih/nci/pa/webservices/types/*.class"/>
            	<exclude name="**/gov/nih/nci/po/webservices/types/*.class"/>
            </fileset>
        	<auxClasspath>
        		 <path refid="ejb.package.classpath"/>
        		 <path refid="compile.classpath"/>
        		 <path refid="common.package.classpath"/>
        	</auxClasspath>
        </cobertura-instrument>

        <mkdir dir="${pa-webservices.test.reports}"/>
        <junit printSummary="no" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." failureproperty="junit.failure" maxmemory="256m" >
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${pa-webservices.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${pa-webservices.build.coberturaOutputDir}"/>
            <classpath location="${pa-webservices.build.outputDir}"/>
            <classpath location="${pa-webservices.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="pa-ejb.package.test.classpath"/>
            <batchtest todir="${pa-webservices.test.reports}">
                <fileset dir="${pa-webservices.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/AbstractM*Test.java"/>
                    <exclude name="**/AbstractPa*Test.java"/>
                	<exclude name="**/BaseTrialRegistrationServiceTest.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${pa-webservices.test.reports}">
            <fileset dir="${pa-webservices.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${pa-webservices.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${pa-webservices.test.reports}/index.html."/>
        <cobertura-report datafile="${pa-webservices.build.dir}/cobertura.ser" destdir="${pa-webservices.coverage.reports}"
                          srcdir="${pa-webservices.build.srcDir.0}" />
        <cobertura-report datafile="${pa-webservices.build.dir}/cobertura.ser" format="xml" destdir="${pa-webservices.coverage.reports}"
                          srcdir="${pa-webservices.build.srcDir.0}" />
        <cobertura-check datafile="${pa-webservices.build.dir}/cobertura.ser" totalbranchrate="${pa-webservices.coverage.branch}" totallinerate="${pa-webservices.coverage.line}" haltonfailure="true"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${pa-webservices.build.javadoc}" sourcepath="${pa-webservices.build.srcDir.0}" windowtitle="CTRP PA Web Services">
            <doctitle>
                <![CDATA[<h1>CTRP PA Abstraction Web Services Layer</h1>]]>
            </doctitle>
            <classpath>
                <path refid="compile.classpath" />
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
    </target>

<!-- ====================================================================== -->
<!-- Determines build version and revision                                  -->
<!-- ====================================================================== -->
<target name="determine-build-version">
    <property name="project.version" value="${pa.version}"/>
    <tstamp>
        <format property="now" pattern="yyyy MMMM dd HH:mm:ss" locale="en"/>
    </tstamp>
    <property name="project.revision" value="${now}"/>
</target>
</project>

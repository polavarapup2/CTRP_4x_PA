<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- pa-ejb ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="pa-ejb" default="package" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <property name="tier" value="LOCAL"/>
    <property file="${basedir}/../../build-pa/tier-properties/build-lite-${tier}.properties"/>
    <property file="${basedir}/../../build-pa/build-lite.properties"/>
    <property file="${basedir}/../../build-pa/version.properties"/>
    <property name="pa-ejb.coverage.line" value="78"/>
    <property name="pa-ejb.coverage.branch" value="64"/>
    <property name="pa-ejb.pmd.maxerrors" value="556"/>

    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property name="pa.resourceDir" value="${software.dir}/pa/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="${pa.resourceDir}/checkstyle.xml"/>

    <property name="java.major.version" value="1.7"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="pa-ejb.build.finalName" value="pa-ejb"/>
    <property name="pa-ejb.build.dir" value="${pa.dir}/pa-ejb/target"/>
    <property name="pa-ejb.build.outputDir" value="${pa-ejb.build.dir}/classes"/>
	<property name="pa-ejb.build.srcgenDir" value="${pa-ejb.build.dir}/generated-src"/>
    <property name="pa-ejb.build.srcDir.0" value="${pa.dir}/pa-ejb/src/java"/>
    <property name="pa-ejb.build.resourceDir.0" value="${pa.dir}/pa-ejb/src/resources"/>
    <property name="pa-ejb.build.testOutputDir" value="${pa-ejb.build.dir}/test-classes"/>
    <property name="pa-ejb.build.testDir.0" value="${pa.dir}/pa-ejb/test/java"/>
    <property name="pa-ejb.build.testResourceDir.0" value="${pa.dir}/pa-ejb/test/resources"/>
    <property name="pa-ejb.test.reports" value="${pa.report.dir}/pa-ejb/test-reports"/>
    <property name="pa-ejb.coverage.reports" value="${pa.report.dir}/pa-ejb/coverage-reports"/>
    <property name="pa-ejb.reporting.outputDirectory" value="${pa.report.dir}/pa-ejb/site"/>
    <property name="pa-ejb.jar" value="${pa-ejb.build.finalName}.jar"/>
    <property name="pa-ejb.build.coberturaOutputDir" value="${pa-ejb.build.dir}/generated-classes"/>
    <property name="pa-ejb.build.javadoc" value="${pa-ejb.build.dir}/javadoc"/>
    <property name="pa-ejb-test.jar" value="${pa-ejb.build.finalName}-test.jar"/>
    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>

    <condition property="ci.server">
        <equals arg1="${tier}" arg2="CI"/>
    </condition>

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="build.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="*.jar"/>
        </fileset>
   </path>

	<path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <fileset dir="${lib.dir}/test">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-simian.classpath">
        <fileset dir="${lib.dir}/test-simian">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-junit.classpath">
        <fileset dir="${lib.dir}/test-junit">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-cobertura.classpath">
        <fileset dir="${lib.dir}/test-cobertura">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-checkstyle.classpath">
        <fileset dir="${lib.dir}/test-checkstyle">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-pmd.classpath">
        <fileset dir="${lib.dir}/test-pmd">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-findbugs.classpath">
        <fileset dir="${lib.dir}/test-findbugs">
            <include name="*.jar"/>
        </fileset>
    </path>


    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${pa-ejb.build.dir}"/>
        <delete dir="${pa.report.dir}/pa-ejb"/>
        <mkdir dir="${pa.report.dir}/pa-ejb"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

	<target name="run-xjc" description="Generates JAXB classes">
		<!-- <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="build.classpath"/> -->
		<taskdef name="xjc" classname="org.jvnet.jaxb2_commons.xjc.XJC2Task" classpathref="build.classpath"/>

		<mkdir dir="${pa-ejb.build.srcgenDir}"/>
		<xjc destdir="${pa-ejb.build.srcgenDir}" extension="true">
		  <schema  dir="${pa-ejb.build.resourceDir.0}" includes="ctgov_public.xsd"/>
		  <binding dir="${pa-ejb.build.resourceDir.0}" includes="ctgov_public.xjb"/>
		</xjc>
	</target>

    <target name="compile" depends="run-xjc" description="Compile the code">
        <mkdir dir="${pa-ejb.build.outputDir}"/>
        <javac destdir="${pa-ejb.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
            	<pathelement location="${pa-ejb.build.srcgenDir}"/>
                <pathelement location="${pa-ejb.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javac>

        <copy todir="${pa-ejb.build.outputDir}" filtering="true">
            <filterset>
                <filter token="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}" />
                <filter token="pdq.upload.filepath.loc" value="${pdq.upload.filepath.loc}" />
                <filter token="tooltips.filepath.loc" value="${tooltips.filepath.loc}" />
                <filter token="batch.upload.filepath.loc" value="${batch.upload.filepath.loc}" />
                <filter token="accrual.batch.upload.filepath.loc" value="${accrual.batch.upload.filepath.loc}" />
                <filter token="po.server.name" value="${po.server.name}" />
                <filter token="po.port.number" value="${po.port.number}" />
                <filter token="po.principal" value="${po.principal}" />
                <filter token="po.credentials" value="${po.credentials}" />
                <filter token="po.topic.clientId" value="${po.topic.clientId}" />
                <filter token="po.topic.userName" value="${po.topic.userName}" />
                <filter token="po.topic.password" value="${po.topic.password}" />
            	<filter token="csm.submitter.group" value="${csm.submitter.group}" />
                <filter token="grid.dorian.url" value="${grid.dorian.url}" />
                <filter token="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
                <filter token="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
                <filter token="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
                <filter token="gridgrouper.url" value="${gridgrouper.url}"/>
                <filter token="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
                <filter token="register.mail.body.url" value="${register.mail.body.url}"/>
                <filter token="mock.po" value="${mock.po}" />
                <filter token="nci.ldap.prefix" value="${nci.ldap.prefix}" />
                <filter token="wikiHelp.baseUrl.pa" value="${wikiHelp.baseUrl.pa}" />
                <filter token="wikiHelp.baseUrl.registry" value="${wikiHelp.baseUrl.registry}" />
                <filter token="wikiHelp.baseUrl.accrual" value="${wikiHelp.baseUrl.accrual}" />
                <filter token="wikiHelp.baseUrl.trialStatusRules" value="${wikiHelp.baseUrl.trialStatusRules}" />
                <filter token="ctgov.ftp.url" value="${ctgov.ftp.url}"/>
                <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
                <filter token="db.username" value="${db.username}"/>
                <filter token="db.password" value="${db.password}"/>
                <filter token="jdbc.driver" value="${jdbc.driver}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
            </filterset>
            <fileset dir="${pa-ejb.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile" description="Compile the test code">
        <mkdir dir="${pa-ejb.build.testOutputDir}"/>
        <javac destdir="${pa-ejb.build.testOutputDir}" nowarn="false" debug="true" optimize="false"
            deprecation="true" source="${java.major.version}" target="${java.major.version}" verbose="false"
            fork="false" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-ejb.build.testDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${pa-ejb.build.outputDir}"/>
                <path refid="test.classpath"/>
                <path refid="common.package.classpath"/>
                <path refid="test-junit.classpath"/>
            </classpath>
        </javac>
        <copy todir="${pa-ejb.build.testOutputDir}">
            <fileset dir="${pa-ejb.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${pa-ejb.test.reports}"/>
        <junit printSummary="no" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${pa-ejb.build.outputDir}"/>
            <classpath location="${pa-ejb.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${pa-ejb.test.reports}" fork="yes" unless="test">
                <fileset dir="${pa-ejb.build.testDir.0}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">
        <property name="coverage.line" value="${pa-ejb.coverage.line}"/>
        <property name="coverage.branch" value="${pa-ejb.coverage.branch}"/>
        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />
        <delete file="${pa-ejb.build.dir}/cobertura.ser" />

        <cobertura-instrument datafile="${pa-ejb.build.dir}/cobertura.ser" toDir="${pa-ejb.build.coberturaOutputDir}" ignoreTrivial="true">
            <fileset dir="${pa-ejb.build.outputDir}">
                <include name="**/*.class" />
            	<exclude name="**/gov/nih/nci/pa/service/ctgov/*.class" />
            	<exclude name="**/gov/nih/nci/pa/util/pomock/*.class" />
            	<exclude name="**/gov/nih/nci/pa/external/*" />
            </fileset>
            <auxClasspath>
                 <path refid="compile.classpath"/>
                 <path refid="common.package.classpath"/>
            </auxClasspath>
        </cobertura-instrument>

        <mkdir dir="${pa-ejb.test.reports}"/>
        <junit printSummary="no" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." showoutput="no" failureproperty="junit.failure">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${pa-ejb.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <!-- <formatter type="plain" usefile="false"/> -->
            <classpath location="${pa-ejb.build.coberturaOutputDir}"/>
            <classpath location="${pa-ejb.build.outputDir}"/>
            <classpath location="${pa-ejb.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${pa-ejb.test.reports}" unless="test">
                <fileset dir="${pa-ejb.build.testDir.0}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${pa-ejb.test.reports}">
            <fileset dir="${pa-ejb.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${pa-ejb.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports at ${pa-ejb.test.reports}/index.html."/>

        <cobertura-report datafile="${pa-ejb.build.dir}/cobertura.ser"
                          destdir="${pa-ejb.coverage.reports}"
                          srcdir="${pa-ejb.build.srcDir.0}" />
        <cobertura-report datafile="${pa-ejb.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${pa-ejb.coverage.reports}"
                          srcdir="${pa-ejb.build.srcDir.0}" />
        <cobertura-check datafile="${pa-ejb.build.dir}/cobertura.ser"
                         totalbranchrate="${coverage.branch}"
                         totallinerate="${coverage.line}"
                         haltonfailure="true"/>
     </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle config="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <pathelement location="${pa-ejb.build.outputDir}"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" excludes="**/gov/nih/nci/pa/util/pomock/*.java,**/gov/nih/nci/pa/external/*"/>
            <!-- <formatter type="plain"/> -->
            <formatter type="plain" toFile="${pa.report.dir}/pa-ejb/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-ejb/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd minimumPriority="3" shortFilenames="false" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxruleviolations="${pa-ejb.pmd.maxerrors}">
            <formatter type="text" toConsole="false"/>
            <formatter type="text" toFile="${pa.report.dir}/pa-ejb/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/pa-ejb/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/pa-ejb/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            	<exclude name="**/gov/nih/nci/pa/util/pomock/*.java" />
            	<exclude name="**/gov/nih/nci/pa/external/*" />
            </fileset>
         <sourceLanguage name="java" version="1.7"/></pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Find Bugs                                                             -->
    <!-- ====================================================================== -->

    <target name="test-findbugs">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="test-findbugs.classpath"/>
        <findbugs reportLevel="high" failOnError="true" classpathref="test-findbugs.classpath"
                      output="xml:withMessages" warningsProperty="bugsFound" maxrank="14" projectname="pa-ejb"
                      outputFile="${pa.report.dir}/pa-ejb/findbugs.xml">
          <auxClasspath>
            <path refid="compile.classpath"/>
            <path refid="common.package.classpath" />
          </auxClasspath>
          <sourcePath path="${pa-ejb.build.srcDir.0}" />
          <class location="${pa-ejb.build.dir}/${pa-ejb.jar}" />
        </findbugs>
        <fail if="bugsFound" message="Bugs found! See ${pa.report.dir}/pa-ejb/findbugs.xml for details."/>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java" excludes="**/gov/nih/nci/pa/util/pomock/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-ejb/simian.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-ejb/simian.xml"/>
            <!-- <formatter type="plain"/> -->
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="compile,compile-tests, jar-test, test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="compile, jar, jar-test, test-checkstyle,test-pmd,test-simian,test-findbugs"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>

    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="jar">
        <jar jarfile="${pa-ejb.build.dir}/${pa-ejb.jar}"
             compress="true"
             index="false"
             basedir="${pa-ejb.build.outputDir}"/>
    </target>

    <target name="jar-test" depends="compile-tests">
                <jar jarfile="${pa-ejb.build.dir}/${pa-ejb-test.jar}"
                     compress="true"
                     index="false"
                     basedir="${pa-ejb.build.testOutputDir}"
                     />
    </target>

    <target name="jar-client">
        <jar jarfile="${pa-ejb.build.dir}/pa-ejb-client.jar"
             compress="true"
             index="false"
             basedir="${pa-ejb.build.outputDir}"
             includes="**/*.class"
             excludes="**/service/*Bean.class
                       **/service/*BeanLocal.class
                       **/service/Abstract*.class
                       **/service/BaseLookUpService.class
                       **/service/ctgov/*
                       **/domain/*
        	           **/external/*
                       **/iso/convert/*
                       **/iso/util/En*Converter*
                       **/service/correlation/*
                       **/service/util/*Bean.class
                       **/service/util/*BeanLocal.class
        	           **/service/util/AccrualUtilityServiceBean.class
        	           **/service/util/AccrualUtilityServiceBeanRemote.class
                       **/util/Hibernate*
                       **/util/TrialUtil*
                       **/util/PaEarPropertyReader*
                       **/util/PADomainUtils*
        "/>
    </target>

    <target name="package-notest" depends="compile,jar,jar-client"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="clean,compile,test-all,jar,jar-test,jar-client"
            description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Maven Installation Targets                                             -->
    <!-- ====================================================================== -->
    <target name="maven:generate-pom">
        <!-- We cannot use in memory poms due to a bug: http://jira.codehaus.org/browse/MANTTASKS-170 -->
        <taskdef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="build.classpath" />
        <artifact:pom id="pa-ejb-pom-temp" groupId="gov.nih.nci.coppa.pa" artifactId="pa-ejb-client" version="${pa.clients.version}" name="PA EJB Client"/>
        <artifact:writepom pomRefId="pa-ejb-pom-temp" file="target/pom.xml"/>
        <artifact:pom id="pa-ejb-pom" file="target/pom.xml"/>
    </target>

    <target name="maven:install" depends="package,maven:generate-pom">
        <echo message="Installing version ${pa.clients.version} to the local maven repo."/>
        <artifact:install file="${pa-ejb.build.dir}/pa-ejb-client.jar">
            <pom refid="pa-ejb-pom"/>
        </artifact:install>
    </target>

    <target name="maven:deploy" depends="package,maven:generate-pom">
        <artifact:remoteRepository id="remote.repository" url="https://ncimvn.nci.nih.gov/nexus/content/repositories/snapshots/">
            <authentication username="${maven.username}" password="${maven.password}"/>
        </artifact:remoteRepository>
        <echo message="Installing version ${pa.clients.version} to the remote maven repo."/>
        <artifact:deploy file="${pa-ejb.build.dir}/pa-ejb-client.jar" uniqueversion="false">
            <remoteRepository refid="remote.repository" />
            <pom refid="pa-ejb-pom"/>
        </artifact:deploy>
    </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${pa-ejb.build.javadoc}"
            sourcepath="${pa-ejb.build.srcDir.0}"
            windowtitle="CTRP PA EJB">
            <doctitle><![CDATA[<h1>CTRP PA Service Layer</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
    </target>

</project>

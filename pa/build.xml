<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Main ant script for COPPA PA                                           -->
<!-- ====================================================================== -->

<project name="pa" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="tier" value="LOCAL"/>
    <property file="${basedir}/../build-pa/tier-properties/build-lite-${tier}.properties"/>
    <property file="${basedir}/../build-pa/build-lite.properties"/>
    <property file="${basedir}/../build-pa/version.properties"/>
    <property name="build.dir" value="${basedir}/../build-pa"/>
    <property name="lib.dir" value="${basedir}/../target/pa/lib"/>
    <property name="local.repo.dir" location="${basedir}/../local-ivy-repo" />
    <property name="commons.target" value="${basedir}/commons/target"/>	
    <property name="ejb.target" value="${basedir}/pa-ejb/target"/>
    <property name="pa-web.target" value="${basedir}/pa-web/target"/>
	<property name="pa-webservices.target" value="${basedir}/pa-webservices/target"/>
    <property name="reg-web.target" value="${basedir}/../reg-web/target"/>
    <property name="ear.target" value="${basedir}/pa-ear/target"/>
    <property name="ear.dir" value="${ear.target}/pa"/>
    <property name="jboss.deploy.directory" value="${application.base.path}/standalone/deployments"/>
	<property name="jboss.bin.directory" value="${application.base.path}/bin"/>
	<property name="webdriver.class" value="org.openqa.selenium.firefox.FirefoxDriver"/>
	
	
    
    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="build.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="**/*.jar" />
        </fileset>
    </path>


    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" depends="storage-init" description="Clean the output directory">
        <ant target="clean" dir="commons" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
    	<ant target="clean" dir="pa-ejb" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="clean" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    	<ant target="clean" dir="pa-webservices" inheritAll="false">
    	    <property name="tier" value="${tier}"/>
    	</ant>
        <ant target="clean" dir="../reg-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="storage-init" description="Initialize hard drive storage directories" unless="remote.build">
        <mkdir dir="${doc.upload.filepath.loc}"/>
        <mkdir dir="${pdq.upload.filepath.loc}"/>
        <mkdir dir="${tooltips.filepath.loc}"/>
        <mkdir dir="${batch.upload.filepath.loc}"/>
        <mkdir dir="${accrual.batch.upload.filepath.loc}"/>
    </target>

    <!-- ====================================================================== -->
    <!-- run PMD / Checkstyle                                                    -->
    <!-- ====================================================================== -->
    <target name="test-static-analysis" description="Runs PMD / Checkstyle">
        <ant target="test-static-analysis" dir="commons" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
        <ant target="test-static-analysis" dir="pa-ejb" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="test-static-analysis" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="test-static-analysis" dir="pa-webservices" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test" description="Run all tests">
        <ant target="test-all" dir="commons" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
        <ant target="test-all" dir="pa-ejb" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="test-all" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="test-all" dir="pa-webservices" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
        <ant target="test-all" dir="../reg-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="runTest" description="Runs the pa-ejb test you specify on the command line with -Dtest=">
        <ant target="runTest" dir="pa-ejb" inheritAll="true"/>
    </target>
	
    <target name="jar-test">
        <ant target="jar-test" dir="pa-ejb" inheritAll="true"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->
 
   <target name="package-subs" depends="clean" description="Package the sub-projects">
        <ant target="package-notest" dir="commons" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>   		
	    <ant target="package-notest" dir="pa-ejb" inheritAll="false">
	        <property name="tier" value="${tier}"/>
	    </ant>
        <ant target="package-notest" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="package-notest" dir="pa-webservices" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>   	
        <ant target="package-notest" dir="../reg-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="ear" description="Build the EAR">
        <delete dir="${ear.target}"/>
        <copy todir="${ear.dir}">
            <fileset dir="${basedir}/pa-ear/src"/>
        </copy>
    	
        <copy todir="${ear.dir}/lib">
            <fileset dir="${lib.dir}/ear"/>
        </copy>

        <copy todir="${ear.dir}/lib">
            <fileset dir="${lib.dir}/ear"/>
        </copy>
        <copy file="${commons.target}/pa-commons.jar" todir="${ear.dir}/lib"/>    	
        <copy file="${ejb.target}/pa-ejb.jar" todir="${ear.dir}"/>
        <copy file="${pa-web.target}/pa-web.war" todir="${ear.dir}"/>
    	<copy file="${pa-webservices.target}/pa-webservices.war" todir="${ear.dir}"/>
        <copy file="${reg-web.target}/reg-web.war" todir="${ear.dir}"/>
        <ear destfile="${ear.target}/pa.ear"
             basedir="${ear.dir}"
             compress="false"
             appxml="${ear.dir}/META-INF/application.xml"/>
    </target>

    <target name="package" depends="ivy-clean,ivy-get,package-subs,ear" description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Deploy locally                                                         -->
    <!-- ====================================================================== -->

    <target name="deploy-notest" depends="package-subs,ear" description="Quick shortcut">
        <available file="${jboss.deploy.directory}" type="dir" property="container.present"/>
        <fail unless="container.present" message="Deploy directory ${jboss.deploy.directory} not available."/>
        <copy todir="${jboss.deploy.directory}" file="${ear.target}/pa.ear"/>
    </target>

    <target name="deploy" depends="clean" description="Deploys the application">
        <available file="${jboss.deploy.directory}" type="dir" property="container.present"/>
        <fail unless="container.present" message="Deploy directory ${jboss.deploy.directory} not available."/>

        <ant target="package" dir="commons" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
        <ant target="package" dir="pa-ejb" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="package" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="package" dir="pa-webservices" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>    	
        <ant target="package" dir="../reg-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <ant target="ear" dir="${basedir}" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
        <copy todir="${jboss.deploy.directory}" file="${ear.target}/pa.ear"/>
    </target>

    <target name="maven:install" depends="clean">
        <ant target="maven:install" dir="commons" inheritall="true"/>
        <ant target="maven:install" dir="pa-ejb" inheritall="true"/>
    </target>

    <target name="maven:deploy" depends="clean">
        <ant target="maven:deploy" dir="commons" inheritall="true"/>
        <ant target="maven:deploy" dir="pa-ejb" inheritall="true"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Run integration tests                                                  -->
    <!-- ====================================================================== -->

    <target name="init-test-db" description="Drops and recreates the ci db.">
        <ant target="init-test-db" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="populate-test-db" description="Populates the ci db with test data.">
        <ant target="populate-test-db" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        </ant>
    </target>

    <target name="run-selenium-tests" description="Runs integration tests against an already deployed application">
        <ant target="run-selenium-tests" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
        	<property name="webdriver.class" value="${webdriver.class}"/>
        </ant>
        <ant target="run-selenium-tests" dir="pa-webservices" inheritAll="false">
            <property name="tier" value="${tier}"/>
            <property name="webdriver.class" value="${webdriver.class}"/>
        </ant>    	
    </target>
	
    <target name="run-performance-tests" description="Runs performance tests against an already deployed application">
        <ant target="run-performance-tests" dir="pa-web" inheritAll="false">
            <property name="tier" value="${tier}"/>
            <property name="webdriver.class" value="${webdriver.class}"/>
        </ant>           
    </target>

   
    <target name="test-integration" description="Runs integration tests against the automatically deploy application."
    	   depends="init-db-deploy-start-jboss,run-selenium-tests,stop-jboss-server">       
    </target>
	
	<target name="test-performance" description="Runs performance tests against the automatically deployed application."
	               depends="deploy-notest,start-jboss-server,jar-test,run-performance-tests,stop-jboss-server">       
	</target>	
	
	<target name="init-db-deploy-start-jboss" depends="database.install,database.update,populate-test-db,deploy-notest,start-jboss-server,jar-test">
	</target>
	
    <target name="stop-jboss-server">	    
	     <exec executable="cmd" osfamily="windows" timeout="30000">
	        <arg value="/c"/>
	        <arg value="${jboss.bin.directory}/jboss-cli.bat"/>     
	        <arg value="--connect"/>
	        <arg value="shutdown"/>
	        <env key="NOPAUSE" value="true"/>
	        <env key="JBOSS_HOME" value="${application.base.path}"/>
	      </exec>
	    
	    <exec executable="${jboss.bin.directory}/jboss-cli.sh" osfamily="unix" timeout="30000">
	      <arg value="--connect"/>
	      <arg value="shutdown"/>
	      <env key="NOPAUSE" value="true"/>
	      <env key="JBOSS_HOME" value="${application.base.path}"/>
	    </exec>
	</target>	
	
    <target name="start-jboss-server">            
        <exec executable="nohup" osfamily="unix" dir="${jboss.bin.directory}" spawn="true">
            <env key="NOPAUSE" value="true" />
            <env key="JBOSS_HOME" value=""/>
        	<env key="JAVA_OPTS" value="-Dctrp.env.ci=true -Xmx4096M -XX:MaxPermSize=512M -Djava.net.preferIPv4Stack=true -Dorg.apache.catalina.connector.URI_ENCODING=UTF-8"/>
            <arg line="./standalone.sh" />
        </exec>

        <exec osfamily="windows" executable="psexec.exe" dir="${jboss.bin.directory}" spawn="true" >
            <env key="NOPAUSE" value="true" />
            <env key="JBOSS_HOME" value=""/>
        	<env key="JAVA_OPTS" value="-Dctrp.env.ci=true -Xmx1024M -XX:MaxPermSize=256M -Djava.net.preferIPv4Stack=true -Dorg.apache.catalina.connector.URI_ENCODING=UTF-8"/>
            <arg line="-d -i -w ${jboss.bin.directory} ${jboss.bin.directory}/standalone.bat" />
        </exec>
        <sleep seconds="120" />    
    </target>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Ivy targets                                                            -->
    <!-- ====================================================================== -->

    <target name="ivy-get" depends="ivy-clean,ivy-build,ivy-compile,ivy-ear,ivy-pa-web,ivy-pa-webservices,ivy-reg-web,ivy-test">
    </target>

    <target name="ivy-clean">
        <delete dir="${lib.dir}" failonerror="false"/>
    </target>

    <target name="ivy-init">
        <echo message="${build.dir}/common/ivysettings.xml"/>
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
            <classpath>
                <pathelement location="${build.dir}/common/ivy-2.0.0.jar"/>
            </classpath>
        </taskdef>
        <ivy:settings file="${build.dir}/common/ivysettings.xml"/>
    </target>
  
    <target name="ivy-build" depends="ivy-init">
        <ivy:resolve refresh="true" conf="build"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="build"/>
        <copy file="${build.dir}/common/postgresql-9.2-1004.jdbc3.jar" todir="${lib.dir}/build"/>
    </target>
  
    <target name="ivy-compile" depends="ivy-init">
        <ivy:resolve refresh="true" conf="compile"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="compile"/>
    </target>

    <target name="ivy-ear" depends="ivy-init">
        <ivy:resolve refresh="true" conf="ear"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="ear"/>
        <copy file="${build.dir}/common/ojdbc6.jar" todir="${lib.dir}/ear"/>
    </target>
 
    <target name="ivy-pa-web" depends="ivy-init">
        <ivy:resolve refresh="true" conf="pa-web"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="pa-web"/>
    </target>
	
    <target name="ivy-pa-webservices" depends="ivy-init">
        <ivy:resolve refresh="true" conf="pa-webservices"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="pa-webservices"/>
    </target>
	
 
    <target name="ivy-reg-web" depends="ivy-init">
        <ivy:resolve refresh="true" conf="reg-web"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="reg-web"/>
    </target>
 
    <target name="ivy-test" depends="ivy-init, get-phantomjs">
        <ivy:resolve refresh="true" conf="test"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test"/>
        <ivy:resolve refresh="true" conf="test-checkstyle"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-checkstyle"/>
        <ivy:resolve refresh="true" conf="test-cobertura"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-cobertura"/>
        <ivy:resolve refresh="true" conf="test-junit"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-junit"/>
        <ivy:resolve refresh="true" conf="test-selenium"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-selenium"/>
        <ivy:resolve refresh="true" conf="test-pmd"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-pmd"/>
        <ivy:resolve refresh="true" conf="test-simian"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-simian"/>
        <ivy:resolve refresh="true" conf="test-findbugs"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-findbugs"/>

    </target>
	
	<target name="get-phantomjs">
		
	    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="build.classpath"/>
		
		<condition property="phantomjs-url" value="${download.phantomjs.win}">
	        <os family="windows"/>
		</condition>
        <condition property="phantomjs-url" value="${download.phantomjs.mac}">
	        <os family="mac"/>
        </condition>
        <condition property="phantomjs-url" value="${download.phantomjs.linux}">
            <os family="unix"/>
        </condition>		
		<get dest="${lib.dir}" src="${phantomjs-url}" verbose="on" usetimestamp="true" retries="10"/>
		<mkdir dir="${lib.dir}/phantomjs"/>
		
		<!-- ZIP -->
		<unzip dest="${lib.dir}/phantomjs">
			<fileset dir="${lib.dir}">
			        <include name="phantomjs*.zip"/>			       
			</fileset>			 
		</unzip>
		
		<!-- tar.bz2 -->
		<for param="file">
        	  <path>
        	    <fileset dir="${lib.dir}" includes="phantomjs*.tar.bz2"/>
        	  </path>
        	  <sequential>		
        	  	 <bunzip2 src="@{file}" dest="${lib.dir}/phantomjs"/>		  
        	        <untar dest="${lib.dir}/phantomjs">
        	            <fileset dir="${lib.dir}/phantomjs">
        	                    <include name="phantomjs*.tar"/>                   
        	            </fileset>           
        	        </untar>		  	
        	  </sequential>
		 </for>		
	</target>

    <!-- ====================================================================== -->
    <!-- Database targets                                                       -->
    <!-- ====================================================================== -->
    <target name="database.install">
        <echo message="Creating Postgres database named ${db.name} in ${jdbc.base}."/>
        <sql driver="org.postgresql.Driver"
             url="${jdbc.base}/postgres"
             userid="${db.username}"
             password="${db.password}"
             expandproperties="true"
             onerror="abort"
             autocommit="true"
             classpathref="build.classpath">
            <transaction>drop database if exists ${db.name};</transaction>
            <transaction>create database ${db.name};</transaction>
        </sql>

        <property name="dbinstscript.dir" value="${basedir}/dbscripts/db-install/postgresql"/>
        <sql driver="org.postgresql.Driver"
             url="${jdbc.url}"
             userid="${db.username}"
             password="${db.password}"
             onerror="abort"
             autocommit="true"
             classpathref="build.classpath"
 			 delimiter="/" 
             delimitertype="row" 
             keepformat="true">
            <transaction src="${dbinstscript.dir}/csmCreateSchema.sql"/>
            <transaction src="${dbinstscript.dir}/csmBootstrapData.sql"/>
            <transaction src="${dbinstscript.dir}/PG_CTODS_PA.sql"/>
            <transaction src="${dbinstscript.dir}/country.sql"/>
            <transaction src="${dbinstscript.dir}/regulatoryAuthority.sql"/>
            <transaction src="${dbinstscript.dir}/FUNDING_MECHANISM.SQL"/>
            <transaction src="${dbinstscript.dir}/PA_PROPERTIES.SQL"/>
            <transaction src="${dbinstscript.dir}/organizationBootstrapData.sql"/>
        </sql>
    </target>

    <target name="database.update">
        <delete dir="${basedir}/target"/>
        <taskdef resource="liquibasetasks.properties" classpathref="build.classpath"/>
        <property name="dbscript.dir" value="${basedir}/dbscripts/db-upgrade"/>
        <copy file="${dbscript.dir}/db-upgrade.xml" todir="${basedir}/target" overwrite="true">
            <filterset>
                <filter token="db-upgrade.run.dir" value="${dbscript.dir}/postgresql"/>
            </filterset>
        </copy>
    	<property name="liq.jdbc.url" value="${jdbc.url}?connectTimeout=0&amp;socketTimeout=0&amp;tcpKeepAlive=true"/>
    	<echo>Liquibase URL: ${liq.jdbc.url}</echo>
        <updateDatabase driver="${jdbc.driver}" url="${liq.jdbc.url}" username="${db.username}" password="${db.password}"
                        classpathref="build.classpath" changeLogFile="${basedir}/target/db-upgrade.xml"/>
    </target>
    
    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->
    <target name="generate-javadoc" description="Generate Javadoc">
        <delete dir="javadoc"/>
        <mkdir dir="javadoc"/>

        <ant target="generate-javadoc" dir="commons" inheritAll="false" />
        <copy todir="javadoc/commons">
              <fileset dir="commons/target/javadoc/"/>
        </copy>

        <ant target="generate-javadoc" dir="pa-ejb" inheritAll="false" />
        <copy todir="javadoc/pa-ejb">
              <fileset dir="pa-ejb/target/javadoc/"/>
        </copy>
    	
        <ant target="generate-javadoc" dir="pa-web" inheritAll="false" />
        <copy todir="javadoc/pa-web">
              <fileset dir="pa-web/target/javadoc/"/>
        </copy>
    	
        <ant target="generate-javadoc" dir="pa-webservices" inheritAll="false" />
        <copy todir="javadoc/pa-webservices">
              <fileset dir="pa-webservices/target/javadoc/"/>
        </copy>   	

        <zip destfile="javadoc/pa-javadoc.zip">
            <fileset dir="javadoc" />
        </zip>
    </target>

</project>
